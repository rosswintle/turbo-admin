(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __commonJS = (cb, mod) => () => (mod || cb((mod = {exports: {}}).exports, mod), mod.exports);
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
  };

  // src/fuse-6.4.6.js
  var require_fuse_6_4_6 = __commonJS((exports, module) => {
    var e;
    var t;
    e = exports, t = function() {
      "use strict";
      function e2(t3) {
        return (e2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(t3);
      }
      function t2(e3, t3) {
        if (!(e3 instanceof t3))
          throw new TypeError("Cannot call a class as a function");
      }
      function n(e3, t3) {
        for (var n2 = 0; n2 < t3.length; n2++) {
          var r2 = t3[n2];
          r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e3, r2.key, r2);
        }
      }
      function r(e3, t3, r2) {
        return t3 && n(e3.prototype, t3), r2 && n(e3, r2), e3;
      }
      function i(e3, t3, n2) {
        return t3 in e3 ? Object.defineProperty(e3, t3, {value: n2, enumerable: true, configurable: true, writable: true}) : e3[t3] = n2, e3;
      }
      function o(e3, t3) {
        var n2 = Object.keys(e3);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e3);
          t3 && (r2 = r2.filter(function(t4) {
            return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
          })), n2.push.apply(n2, r2);
        }
        return n2;
      }
      function c(e3) {
        for (var t3 = 1; t3 < arguments.length; t3++) {
          var n2 = arguments[t3] != null ? arguments[t3] : {};
          t3 % 2 ? o(Object(n2), true).forEach(function(t4) {
            i(e3, t4, n2[t4]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n2)) : o(Object(n2)).forEach(function(t4) {
            Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n2, t4));
          });
        }
        return e3;
      }
      function a(e3, t3) {
        if (typeof t3 != "function" && t3 !== null)
          throw new TypeError("Super expression must either be null or a function");
        e3.prototype = Object.create(t3 && t3.prototype, {constructor: {value: e3, writable: true, configurable: true}}), t3 && u(e3, t3);
      }
      function s(e3) {
        return (s = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
          return e4.__proto__ || Object.getPrototypeOf(e4);
        })(e3);
      }
      function u(e3, t3) {
        return (u = Object.setPrototypeOf || function(e4, t4) {
          return e4.__proto__ = t4, e4;
        })(e3, t3);
      }
      function h(e3, t3) {
        return !t3 || typeof t3 != "object" && typeof t3 != "function" ? function(e4) {
          if (e4 === void 0)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return e4;
        }(e3) : t3;
      }
      function f(e3) {
        var t3 = function() {
          if (typeof Reflect == "undefined" || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if (typeof Proxy == "function")
            return true;
          try {
            return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
            })), true;
          } catch (e4) {
            return false;
          }
        }();
        return function() {
          var n2, r2 = s(e3);
          if (t3) {
            var i2 = s(this).constructor;
            n2 = Reflect.construct(r2, arguments, i2);
          } else
            n2 = r2.apply(this, arguments);
          return h(this, n2);
        };
      }
      function l(e3) {
        return function(e4) {
          if (Array.isArray(e4))
            return d(e4);
        }(e3) || function(e4) {
          if (typeof Symbol != "undefined" && Symbol.iterator in Object(e4))
            return Array.from(e4);
        }(e3) || function(e4, t3) {
          if (e4) {
            if (typeof e4 == "string")
              return d(e4, t3);
            var n2 = Object.prototype.toString.call(e4).slice(8, -1);
            return n2 === "Object" && e4.constructor && (n2 = e4.constructor.name), n2 === "Map" || n2 === "Set" ? Array.from(e4) : n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2) ? d(e4, t3) : void 0;
          }
        }(e3) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function d(e3, t3) {
        (t3 == null || t3 > e3.length) && (t3 = e3.length);
        for (var n2 = 0, r2 = new Array(t3); n2 < t3; n2++)
          r2[n2] = e3[n2];
        return r2;
      }
      function v(e3) {
        return Array.isArray ? Array.isArray(e3) : b(e3) === "[object Array]";
      }
      function g(e3) {
        return typeof e3 == "string";
      }
      function y(e3) {
        return typeof e3 == "number";
      }
      function p(e3) {
        return e3 === true || e3 === false || function(e4) {
          return m(e4) && e4 !== null;
        }(e3) && b(e3) == "[object Boolean]";
      }
      function m(t3) {
        return e2(t3) === "object";
      }
      function k(e3) {
        return e3 != null;
      }
      function M(e3) {
        return !e3.trim().length;
      }
      function b(e3) {
        return e3 == null ? e3 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(e3);
      }
      var x = function(e3) {
        return "Invalid value for key ".concat(e3);
      }, L = function(e3) {
        return "Pattern length exceeds max of ".concat(e3, ".");
      }, S = Object.prototype.hasOwnProperty, w = function() {
        function e3(n2) {
          var r2 = this;
          t2(this, e3), this._keys = [], this._keyMap = {};
          var i2 = 0;
          n2.forEach(function(e4) {
            var t3 = _(e4);
            i2 += t3.weight, r2._keys.push(t3), r2._keyMap[t3.id] = t3, i2 += t3.weight;
          }), this._keys.forEach(function(e4) {
            e4.weight /= i2;
          });
        }
        return r(e3, [{key: "get", value: function(e4) {
          return this._keyMap[e4];
        }}, {key: "keys", value: function() {
          return this._keys;
        }}, {key: "toJSON", value: function() {
          return JSON.stringify(this._keys);
        }}]), e3;
      }();
      function _(e3) {
        var t3 = null, n2 = null, r2 = null, i2 = 1;
        if (g(e3) || v(e3))
          r2 = e3, t3 = O(e3), n2 = j(e3);
        else {
          if (!S.call(e3, "name"))
            throw new Error(function(e4) {
              return "Missing ".concat(e4, " property in key");
            }("name"));
          var o2 = e3.name;
          if (r2 = o2, S.call(e3, "weight") && (i2 = e3.weight) <= 0)
            throw new Error(function(e4) {
              return "Property 'weight' in key '".concat(e4, "' must be a positive integer");
            }(o2));
          t3 = O(o2), n2 = j(o2);
        }
        return {path: t3, id: n2, weight: i2, src: r2};
      }
      function O(e3) {
        return v(e3) ? e3 : e3.split(".");
      }
      function j(e3) {
        return v(e3) ? e3.join(".") : e3;
      }
      var A = c({}, {isCaseSensitive: false, includeScore: false, keys: [], shouldSort: true, sortFn: function(e3, t3) {
        return e3.score === t3.score ? e3.idx < t3.idx ? -1 : 1 : e3.score < t3.score ? -1 : 1;
      }}, {}, {includeMatches: false, findAllMatches: false, minMatchCharLength: 1}, {}, {location: 0, threshold: 0.6, distance: 100}, {}, {useExtendedSearch: false, getFn: function(e3, t3) {
        var n2 = [], r2 = false;
        return function e4(t4, i2, o2) {
          if (k(t4))
            if (i2[o2]) {
              var c2 = t4[i2[o2]];
              if (!k(c2))
                return;
              if (o2 === i2.length - 1 && (g(c2) || y(c2) || p(c2)))
                n2.push(function(e5) {
                  return e5 == null ? "" : function(e6) {
                    if (typeof e6 == "string")
                      return e6;
                    var t5 = e6 + "";
                    return t5 == "0" && 1 / e6 == -1 / 0 ? "-0" : t5;
                  }(e5);
                }(c2));
              else if (v(c2)) {
                r2 = true;
                for (var a2 = 0, s2 = c2.length; a2 < s2; a2 += 1)
                  e4(c2[a2], i2, o2 + 1);
              } else
                i2.length && e4(c2, i2, o2 + 1);
            } else
              n2.push(t4);
        }(e3, g(t3) ? t3.split(".") : t3, 0), r2 ? n2 : n2[0];
      }, ignoreLocation: false, ignoreFieldNorm: false}), I = /[^ ]+/g;
      function C() {
        var e3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 3, t3 = new Map(), n2 = Math.pow(10, e3);
        return {get: function(e4) {
          var r2 = e4.match(I).length;
          if (t3.has(r2))
            return t3.get(r2);
          var i2 = 1 / Math.sqrt(r2), o2 = parseFloat(Math.round(i2 * n2) / n2);
          return t3.set(r2, o2), o2;
        }, clear: function() {
          t3.clear();
        }};
      }
      var E = function() {
        function e3() {
          var n2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r2 = n2.getFn, i2 = r2 === void 0 ? A.getFn : r2;
          t2(this, e3), this.norm = C(3), this.getFn = i2, this.isCreated = false, this.setIndexRecords();
        }
        return r(e3, [{key: "setSources", value: function() {
          var e4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          this.docs = e4;
        }}, {key: "setIndexRecords", value: function() {
          var e4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          this.records = e4;
        }}, {key: "setKeys", value: function() {
          var e4 = this, t3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          this.keys = t3, this._keysMap = {}, t3.forEach(function(t4, n2) {
            e4._keysMap[t4.id] = n2;
          });
        }}, {key: "create", value: function() {
          var e4 = this;
          !this.isCreated && this.docs.length && (this.isCreated = true, g(this.docs[0]) ? this.docs.forEach(function(t3, n2) {
            e4._addString(t3, n2);
          }) : this.docs.forEach(function(t3, n2) {
            e4._addObject(t3, n2);
          }), this.norm.clear());
        }}, {key: "add", value: function(e4) {
          var t3 = this.size();
          g(e4) ? this._addString(e4, t3) : this._addObject(e4, t3);
        }}, {key: "removeAt", value: function(e4) {
          this.records.splice(e4, 1);
          for (var t3 = e4, n2 = this.size(); t3 < n2; t3 += 1)
            this.records[t3].i -= 1;
        }}, {key: "getValueForItemAtKeyId", value: function(e4, t3) {
          return e4[this._keysMap[t3]];
        }}, {key: "size", value: function() {
          return this.records.length;
        }}, {key: "_addString", value: function(e4, t3) {
          if (k(e4) && !M(e4)) {
            var n2 = {v: e4, i: t3, n: this.norm.get(e4)};
            this.records.push(n2);
          }
        }}, {key: "_addObject", value: function(e4, t3) {
          var n2 = this, r2 = {i: t3, $: {}};
          this.keys.forEach(function(t4, i2) {
            var o2 = n2.getFn(e4, t4.path);
            if (k(o2)) {
              if (v(o2))
                !function() {
                  for (var e5 = [], t5 = [{nestedArrIndex: -1, value: o2}]; t5.length; ) {
                    var c3 = t5.pop(), a2 = c3.nestedArrIndex, s2 = c3.value;
                    if (k(s2))
                      if (g(s2) && !M(s2)) {
                        var u2 = {v: s2, i: a2, n: n2.norm.get(s2)};
                        e5.push(u2);
                      } else
                        v(s2) && s2.forEach(function(e6, n3) {
                          t5.push({nestedArrIndex: n3, value: e6});
                        });
                  }
                  r2.$[i2] = e5;
                }();
              else if (!M(o2)) {
                var c2 = {v: o2, n: n2.norm.get(o2)};
                r2.$[i2] = c2;
              }
            }
          }), this.records.push(r2);
        }}, {key: "toJSON", value: function() {
          return {keys: this.keys, records: this.records};
        }}]), e3;
      }();
      function $(e3, t3) {
        var n2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, r2 = n2.getFn, i2 = r2 === void 0 ? A.getFn : r2, o2 = new E({getFn: i2});
        return o2.setKeys(e3.map(_)), o2.setSources(t3), o2.create(), o2;
      }
      function R(e3) {
        var t3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, n2 = t3.errors, r2 = n2 === void 0 ? 0 : n2, i2 = t3.currentLocation, o2 = i2 === void 0 ? 0 : i2, c2 = t3.expectedLocation, a2 = c2 === void 0 ? 0 : c2, s2 = t3.distance, u2 = s2 === void 0 ? A.distance : s2, h2 = t3.ignoreLocation, f2 = h2 === void 0 ? A.ignoreLocation : h2, l2 = r2 / e3.length;
        if (f2)
          return l2;
        var d2 = Math.abs(a2 - o2);
        return u2 ? l2 + d2 / u2 : d2 ? 1 : l2;
      }
      function F() {
        for (var e3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], t3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : A.minMatchCharLength, n2 = [], r2 = -1, i2 = -1, o2 = 0, c2 = e3.length; o2 < c2; o2 += 1) {
          var a2 = e3[o2];
          a2 && r2 === -1 ? r2 = o2 : a2 || r2 === -1 || ((i2 = o2 - 1) - r2 + 1 >= t3 && n2.push([r2, i2]), r2 = -1);
        }
        return e3[o2 - 1] && o2 - r2 >= t3 && n2.push([r2, o2 - 1]), n2;
      }
      function P(e3) {
        for (var t3 = {}, n2 = 0, r2 = e3.length; n2 < r2; n2 += 1) {
          var i2 = e3.charAt(n2);
          t3[i2] = (t3[i2] || 0) | 1 << r2 - n2 - 1;
        }
        return t3;
      }
      var N = function() {
        function e3(n2) {
          var r2 = this, i2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, o2 = i2.location, c2 = o2 === void 0 ? A.location : o2, a2 = i2.threshold, s2 = a2 === void 0 ? A.threshold : a2, u2 = i2.distance, h2 = u2 === void 0 ? A.distance : u2, f2 = i2.includeMatches, l2 = f2 === void 0 ? A.includeMatches : f2, d2 = i2.findAllMatches, v2 = d2 === void 0 ? A.findAllMatches : d2, g2 = i2.minMatchCharLength, y2 = g2 === void 0 ? A.minMatchCharLength : g2, p2 = i2.isCaseSensitive, m2 = p2 === void 0 ? A.isCaseSensitive : p2, k2 = i2.ignoreLocation, M2 = k2 === void 0 ? A.ignoreLocation : k2;
          if (t2(this, e3), this.options = {location: c2, threshold: s2, distance: h2, includeMatches: l2, findAllMatches: v2, minMatchCharLength: y2, isCaseSensitive: m2, ignoreLocation: M2}, this.pattern = m2 ? n2 : n2.toLowerCase(), this.chunks = [], this.pattern.length) {
            var b2 = function(e4, t3) {
              r2.chunks.push({pattern: e4, alphabet: P(e4), startIndex: t3});
            }, x2 = this.pattern.length;
            if (x2 > 32) {
              for (var L2 = 0, S2 = x2 % 32, w2 = x2 - S2; L2 < w2; )
                b2(this.pattern.substr(L2, 32), L2), L2 += 32;
              if (S2) {
                var _2 = x2 - 32;
                b2(this.pattern.substr(_2), _2);
              }
            } else
              b2(this.pattern, 0);
          }
        }
        return r(e3, [{key: "searchIn", value: function(e4) {
          var t3 = this.options, n2 = t3.isCaseSensitive, r2 = t3.includeMatches;
          if (n2 || (e4 = e4.toLowerCase()), this.pattern === e4) {
            var i2 = {isMatch: true, score: 0};
            return r2 && (i2.indices = [[0, e4.length - 1]]), i2;
          }
          var o2 = this.options, c2 = o2.location, a2 = o2.distance, s2 = o2.threshold, u2 = o2.findAllMatches, h2 = o2.minMatchCharLength, f2 = o2.ignoreLocation, d2 = [], v2 = 0, g2 = false;
          this.chunks.forEach(function(t4) {
            var n3 = t4.pattern, i3 = t4.alphabet, o3 = t4.startIndex, y3 = function(e5, t5, n4) {
              var r3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, i4 = r3.location, o4 = i4 === void 0 ? A.location : i4, c3 = r3.distance, a3 = c3 === void 0 ? A.distance : c3, s3 = r3.threshold, u3 = s3 === void 0 ? A.threshold : s3, h3 = r3.findAllMatches, f3 = h3 === void 0 ? A.findAllMatches : h3, l2 = r3.minMatchCharLength, d3 = l2 === void 0 ? A.minMatchCharLength : l2, v3 = r3.includeMatches, g3 = v3 === void 0 ? A.includeMatches : v3, y4 = r3.ignoreLocation, p3 = y4 === void 0 ? A.ignoreLocation : y4;
              if (t5.length > 32)
                throw new Error(L(32));
              for (var m3, k3 = t5.length, M2 = e5.length, b2 = Math.max(0, Math.min(o4, M2)), x2 = u3, S2 = b2, w2 = d3 > 1 || g3, _2 = w2 ? Array(M2) : []; (m3 = e5.indexOf(t5, S2)) > -1; ) {
                var O2 = R(t5, {currentLocation: m3, expectedLocation: b2, distance: a3, ignoreLocation: p3});
                if (x2 = Math.min(O2, x2), S2 = m3 + k3, w2)
                  for (var j2 = 0; j2 < k3; )
                    _2[m3 + j2] = 1, j2 += 1;
              }
              S2 = -1;
              for (var I2 = [], C2 = 1, E2 = k3 + M2, $2 = 1 << k3 - 1, P2 = 0; P2 < k3; P2 += 1) {
                for (var N2 = 0, D2 = E2; N2 < D2; ) {
                  var z2 = R(t5, {errors: P2, currentLocation: b2 + D2, expectedLocation: b2, distance: a3, ignoreLocation: p3});
                  z2 <= x2 ? N2 = D2 : E2 = D2, D2 = Math.floor((E2 - N2) / 2 + N2);
                }
                E2 = D2;
                var K2 = Math.max(1, b2 - D2 + 1), q2 = f3 ? M2 : Math.min(b2 + D2, M2) + k3, W2 = Array(q2 + 2);
                W2[q2 + 1] = (1 << P2) - 1;
                for (var J2 = q2; J2 >= K2; J2 -= 1) {
                  var T2 = J2 - 1, U2 = n4[e5.charAt(T2)];
                  if (w2 && (_2[T2] = +!!U2), W2[J2] = (W2[J2 + 1] << 1 | 1) & U2, P2 && (W2[J2] |= (I2[J2 + 1] | I2[J2]) << 1 | 1 | I2[J2 + 1]), W2[J2] & $2 && (C2 = R(t5, {errors: P2, currentLocation: T2, expectedLocation: b2, distance: a3, ignoreLocation: p3})) <= x2) {
                    if (x2 = C2, (S2 = T2) <= b2)
                      break;
                    K2 = Math.max(1, 2 * b2 - S2);
                  }
                }
                var V2 = R(t5, {errors: P2 + 1, currentLocation: b2, expectedLocation: b2, distance: a3, ignoreLocation: p3});
                if (V2 > x2)
                  break;
                I2 = W2;
              }
              var B2 = {isMatch: S2 >= 0, score: Math.max(1e-3, C2)};
              if (w2) {
                var G2 = F(_2, d3);
                G2.length ? g3 && (B2.indices = G2) : B2.isMatch = false;
              }
              return B2;
            }(e4, n3, i3, {location: c2 + o3, distance: a2, threshold: s2, findAllMatches: u2, minMatchCharLength: h2, includeMatches: r2, ignoreLocation: f2}), p2 = y3.isMatch, m2 = y3.score, k2 = y3.indices;
            p2 && (g2 = true), v2 += m2, p2 && k2 && (d2 = [].concat(l(d2), l(k2)));
          });
          var y2 = {isMatch: g2, score: g2 ? v2 / this.chunks.length : 1};
          return g2 && r2 && (y2.indices = d2), y2;
        }}]), e3;
      }(), D = function() {
        function e3(n2) {
          t2(this, e3), this.pattern = n2;
        }
        return r(e3, [{key: "search", value: function() {
        }}], [{key: "isMultiMatch", value: function(e4) {
          return z(e4, this.multiRegex);
        }}, {key: "isSingleMatch", value: function(e4) {
          return z(e4, this.singleRegex);
        }}]), e3;
      }();
      function z(e3, t3) {
        var n2 = e3.match(t3);
        return n2 ? n2[1] : null;
      }
      var K = function(e3) {
        a(i2, e3);
        var n2 = f(i2);
        function i2(e4) {
          return t2(this, i2), n2.call(this, e4);
        }
        return r(i2, [{key: "search", value: function(e4) {
          var t3 = e4 === this.pattern;
          return {isMatch: t3, score: t3 ? 0 : 1, indices: [0, this.pattern.length - 1]};
        }}], [{key: "type", get: function() {
          return "exact";
        }}, {key: "multiRegex", get: function() {
          return /^="(.*)"$/;
        }}, {key: "singleRegex", get: function() {
          return /^=(.*)$/;
        }}]), i2;
      }(D), q = function(e3) {
        a(i2, e3);
        var n2 = f(i2);
        function i2(e4) {
          return t2(this, i2), n2.call(this, e4);
        }
        return r(i2, [{key: "search", value: function(e4) {
          var t3 = e4.indexOf(this.pattern) === -1;
          return {isMatch: t3, score: t3 ? 0 : 1, indices: [0, e4.length - 1]};
        }}], [{key: "type", get: function() {
          return "inverse-exact";
        }}, {key: "multiRegex", get: function() {
          return /^!"(.*)"$/;
        }}, {key: "singleRegex", get: function() {
          return /^!(.*)$/;
        }}]), i2;
      }(D), W = function(e3) {
        a(i2, e3);
        var n2 = f(i2);
        function i2(e4) {
          return t2(this, i2), n2.call(this, e4);
        }
        return r(i2, [{key: "search", value: function(e4) {
          var t3 = e4.startsWith(this.pattern);
          return {isMatch: t3, score: t3 ? 0 : 1, indices: [0, this.pattern.length - 1]};
        }}], [{key: "type", get: function() {
          return "prefix-exact";
        }}, {key: "multiRegex", get: function() {
          return /^\^"(.*)"$/;
        }}, {key: "singleRegex", get: function() {
          return /^\^(.*)$/;
        }}]), i2;
      }(D), J = function(e3) {
        a(i2, e3);
        var n2 = f(i2);
        function i2(e4) {
          return t2(this, i2), n2.call(this, e4);
        }
        return r(i2, [{key: "search", value: function(e4) {
          var t3 = !e4.startsWith(this.pattern);
          return {isMatch: t3, score: t3 ? 0 : 1, indices: [0, e4.length - 1]};
        }}], [{key: "type", get: function() {
          return "inverse-prefix-exact";
        }}, {key: "multiRegex", get: function() {
          return /^!\^"(.*)"$/;
        }}, {key: "singleRegex", get: function() {
          return /^!\^(.*)$/;
        }}]), i2;
      }(D), T = function(e3) {
        a(i2, e3);
        var n2 = f(i2);
        function i2(e4) {
          return t2(this, i2), n2.call(this, e4);
        }
        return r(i2, [{key: "search", value: function(e4) {
          var t3 = e4.endsWith(this.pattern);
          return {isMatch: t3, score: t3 ? 0 : 1, indices: [e4.length - this.pattern.length, e4.length - 1]};
        }}], [{key: "type", get: function() {
          return "suffix-exact";
        }}, {key: "multiRegex", get: function() {
          return /^"(.*)"\$$/;
        }}, {key: "singleRegex", get: function() {
          return /^(.*)\$$/;
        }}]), i2;
      }(D), U = function(e3) {
        a(i2, e3);
        var n2 = f(i2);
        function i2(e4) {
          return t2(this, i2), n2.call(this, e4);
        }
        return r(i2, [{key: "search", value: function(e4) {
          var t3 = !e4.endsWith(this.pattern);
          return {isMatch: t3, score: t3 ? 0 : 1, indices: [0, e4.length - 1]};
        }}], [{key: "type", get: function() {
          return "inverse-suffix-exact";
        }}, {key: "multiRegex", get: function() {
          return /^!"(.*)"\$$/;
        }}, {key: "singleRegex", get: function() {
          return /^!(.*)\$$/;
        }}]), i2;
      }(D), V = function(e3) {
        a(i2, e3);
        var n2 = f(i2);
        function i2(e4) {
          var r2, o2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, c2 = o2.location, a2 = c2 === void 0 ? A.location : c2, s2 = o2.threshold, u2 = s2 === void 0 ? A.threshold : s2, h2 = o2.distance, f2 = h2 === void 0 ? A.distance : h2, l2 = o2.includeMatches, d2 = l2 === void 0 ? A.includeMatches : l2, v2 = o2.findAllMatches, g2 = v2 === void 0 ? A.findAllMatches : v2, y2 = o2.minMatchCharLength, p2 = y2 === void 0 ? A.minMatchCharLength : y2, m2 = o2.isCaseSensitive, k2 = m2 === void 0 ? A.isCaseSensitive : m2, M2 = o2.ignoreLocation, b2 = M2 === void 0 ? A.ignoreLocation : M2;
          return t2(this, i2), (r2 = n2.call(this, e4))._bitapSearch = new N(e4, {location: a2, threshold: u2, distance: f2, includeMatches: d2, findAllMatches: g2, minMatchCharLength: p2, isCaseSensitive: k2, ignoreLocation: b2}), r2;
        }
        return r(i2, [{key: "search", value: function(e4) {
          return this._bitapSearch.searchIn(e4);
        }}], [{key: "type", get: function() {
          return "fuzzy";
        }}, {key: "multiRegex", get: function() {
          return /^"(.*)"$/;
        }}, {key: "singleRegex", get: function() {
          return /^(.*)$/;
        }}]), i2;
      }(D), B = function(e3) {
        a(i2, e3);
        var n2 = f(i2);
        function i2(e4) {
          return t2(this, i2), n2.call(this, e4);
        }
        return r(i2, [{key: "search", value: function(e4) {
          for (var t3, n3 = 0, r2 = [], i3 = this.pattern.length; (t3 = e4.indexOf(this.pattern, n3)) > -1; )
            n3 = t3 + i3, r2.push([t3, n3 - 1]);
          var o2 = !!r2.length;
          return {isMatch: o2, score: o2 ? 0 : 1, indices: r2};
        }}], [{key: "type", get: function() {
          return "include";
        }}, {key: "multiRegex", get: function() {
          return /^'"(.*)"$/;
        }}, {key: "singleRegex", get: function() {
          return /^'(.*)$/;
        }}]), i2;
      }(D), G = [K, B, W, J, U, T, q, V], H = G.length, Q = / +(?=([^\"]*\"[^\"]*\")*[^\"]*$)/;
      function X(e3) {
        var t3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return e3.split("|").map(function(e4) {
          for (var n2 = e4.trim().split(Q).filter(function(e5) {
            return e5 && !!e5.trim();
          }), r2 = [], i2 = 0, o2 = n2.length; i2 < o2; i2 += 1) {
            for (var c2 = n2[i2], a2 = false, s2 = -1; !a2 && ++s2 < H; ) {
              var u2 = G[s2], h2 = u2.isMultiMatch(c2);
              h2 && (r2.push(new u2(h2, t3)), a2 = true);
            }
            if (!a2)
              for (s2 = -1; ++s2 < H; ) {
                var f2 = G[s2], l2 = f2.isSingleMatch(c2);
                if (l2) {
                  r2.push(new f2(l2, t3));
                  break;
                }
              }
          }
          return r2;
        });
      }
      var Y = new Set([V.type, B.type]), Z = function() {
        function e3(n2) {
          var r2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i2 = r2.isCaseSensitive, o2 = i2 === void 0 ? A.isCaseSensitive : i2, c2 = r2.includeMatches, a2 = c2 === void 0 ? A.includeMatches : c2, s2 = r2.minMatchCharLength, u2 = s2 === void 0 ? A.minMatchCharLength : s2, h2 = r2.ignoreLocation, f2 = h2 === void 0 ? A.ignoreLocation : h2, l2 = r2.findAllMatches, d2 = l2 === void 0 ? A.findAllMatches : l2, v2 = r2.location, g2 = v2 === void 0 ? A.location : v2, y2 = r2.threshold, p2 = y2 === void 0 ? A.threshold : y2, m2 = r2.distance, k2 = m2 === void 0 ? A.distance : m2;
          t2(this, e3), this.query = null, this.options = {isCaseSensitive: o2, includeMatches: a2, minMatchCharLength: u2, findAllMatches: d2, ignoreLocation: f2, location: g2, threshold: p2, distance: k2}, this.pattern = o2 ? n2 : n2.toLowerCase(), this.query = X(this.pattern, this.options);
        }
        return r(e3, [{key: "searchIn", value: function(e4) {
          var t3 = this.query;
          if (!t3)
            return {isMatch: false, score: 1};
          var n2 = this.options, r2 = n2.includeMatches;
          e4 = n2.isCaseSensitive ? e4 : e4.toLowerCase();
          for (var i2 = 0, o2 = [], c2 = 0, a2 = 0, s2 = t3.length; a2 < s2; a2 += 1) {
            var u2 = t3[a2];
            o2.length = 0, i2 = 0;
            for (var h2 = 0, f2 = u2.length; h2 < f2; h2 += 1) {
              var d2 = u2[h2], v2 = d2.search(e4), g2 = v2.isMatch, y2 = v2.indices, p2 = v2.score;
              if (!g2) {
                c2 = 0, i2 = 0, o2.length = 0;
                break;
              }
              if (i2 += 1, c2 += p2, r2) {
                var m2 = d2.constructor.type;
                Y.has(m2) ? o2 = [].concat(l(o2), l(y2)) : o2.push(y2);
              }
            }
            if (i2) {
              var k2 = {isMatch: true, score: c2 / i2};
              return r2 && (k2.indices = o2), k2;
            }
          }
          return {isMatch: false, score: 1};
        }}], [{key: "condition", value: function(e4, t3) {
          return t3.useExtendedSearch;
        }}]), e3;
      }(), ee = [];
      function te(e3, t3) {
        for (var n2 = 0, r2 = ee.length; n2 < r2; n2 += 1) {
          var i2 = ee[n2];
          if (i2.condition(e3, t3))
            return new i2(e3, t3);
        }
        return new N(e3, t3);
      }
      var ne = "$and", re = "$or", ie = "$path", oe = "$val", ce = function(e3) {
        return !(!e3[ne] && !e3[re]);
      }, ae = function(e3) {
        return !!e3[ie];
      }, se = function(e3) {
        return !v(e3) && m(e3) && !ce(e3);
      }, ue = function(e3) {
        return i({}, ne, Object.keys(e3).map(function(t3) {
          return i({}, t3, e3[t3]);
        }));
      };
      function he(e3, t3) {
        var n2 = t3.ignoreFieldNorm, r2 = n2 === void 0 ? A.ignoreFieldNorm : n2;
        e3.forEach(function(e4) {
          var t4 = 1;
          e4.matches.forEach(function(e5) {
            var n3 = e5.key, i2 = e5.norm, o2 = e5.score, c2 = n3 ? n3.weight : null;
            t4 *= Math.pow(o2 === 0 && c2 ? Number.EPSILON : o2, (c2 || 1) * (r2 ? 1 : i2));
          }), e4.score = t4;
        });
      }
      function fe(e3, t3) {
        var n2 = e3.matches;
        t3.matches = [], k(n2) && n2.forEach(function(e4) {
          if (k(e4.indices) && e4.indices.length) {
            var n3 = {indices: e4.indices, value: e4.value};
            e4.key && (n3.key = e4.key.src), e4.idx > -1 && (n3.refIndex = e4.idx), t3.matches.push(n3);
          }
        });
      }
      function le(e3, t3) {
        t3.score = e3.score;
      }
      function de(e3, t3) {
        var n2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, r2 = n2.includeMatches, i2 = r2 === void 0 ? A.includeMatches : r2, o2 = n2.includeScore, c2 = o2 === void 0 ? A.includeScore : o2, a2 = [];
        return i2 && a2.push(fe), c2 && a2.push(le), e3.map(function(e4) {
          var n3 = e4.idx, r3 = {item: t3[n3], refIndex: n3};
          return a2.length && a2.forEach(function(t4) {
            t4(e4, r3);
          }), r3;
        });
      }
      var ve = function() {
        function e3(n2) {
          var r2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i2 = arguments.length > 2 ? arguments[2] : void 0;
          t2(this, e3), this.options = c({}, A, {}, r2), this.options.useExtendedSearch, this._keyStore = new w(this.options.keys), this.setCollection(n2, i2);
        }
        return r(e3, [{key: "setCollection", value: function(e4, t3) {
          if (this._docs = e4, t3 && !(t3 instanceof E))
            throw new Error("Incorrect 'index' type");
          this._myIndex = t3 || $(this.options.keys, this._docs, {getFn: this.options.getFn});
        }}, {key: "add", value: function(e4) {
          k(e4) && (this._docs.push(e4), this._myIndex.add(e4));
        }}, {key: "remove", value: function() {
          for (var e4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function() {
            return false;
          }, t3 = [], n2 = 0, r2 = this._docs.length; n2 < r2; n2 += 1) {
            var i2 = this._docs[n2];
            e4(i2, n2) && (this.removeAt(n2), n2 -= 1, r2 -= 1, t3.push(i2));
          }
          return t3;
        }}, {key: "removeAt", value: function(e4) {
          this._docs.splice(e4, 1), this._myIndex.removeAt(e4);
        }}, {key: "getIndex", value: function() {
          return this._myIndex;
        }}, {key: "search", value: function(e4) {
          var t3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, n2 = t3.limit, r2 = n2 === void 0 ? -1 : n2, i2 = this.options, o2 = i2.includeMatches, c2 = i2.includeScore, a2 = i2.shouldSort, s2 = i2.sortFn, u2 = i2.ignoreFieldNorm, h2 = g(e4) ? g(this._docs[0]) ? this._searchStringList(e4) : this._searchObjectList(e4) : this._searchLogical(e4);
          return he(h2, {ignoreFieldNorm: u2}), a2 && h2.sort(s2), y(r2) && r2 > -1 && (h2 = h2.slice(0, r2)), de(h2, this._docs, {includeMatches: o2, includeScore: c2});
        }}, {key: "_searchStringList", value: function(e4) {
          var t3 = te(e4, this.options), n2 = this._myIndex.records, r2 = [];
          return n2.forEach(function(e5) {
            var n3 = e5.v, i2 = e5.i, o2 = e5.n;
            if (k(n3)) {
              var c2 = t3.searchIn(n3), a2 = c2.isMatch, s2 = c2.score, u2 = c2.indices;
              a2 && r2.push({item: n3, idx: i2, matches: [{score: s2, value: n3, norm: o2, indices: u2}]});
            }
          }), r2;
        }}, {key: "_searchLogical", value: function(e4) {
          var t3 = this, n2 = function(e5, t4) {
            var n3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, r3 = n3.auto, i3 = r3 === void 0 || r3, o3 = function e6(n4) {
              var r4 = Object.keys(n4), o4 = ae(n4);
              if (!o4 && r4.length > 1 && !ce(n4))
                return e6(ue(n4));
              if (se(n4)) {
                var c2 = o4 ? n4[ie] : r4[0], a2 = o4 ? n4[oe] : n4[c2];
                if (!g(a2))
                  throw new Error(x(c2));
                var s2 = {keyId: j(c2), pattern: a2};
                return i3 && (s2.searcher = te(a2, t4)), s2;
              }
              var u2 = {children: [], operator: r4[0]};
              return r4.forEach(function(t5) {
                var r5 = n4[t5];
                v(r5) && r5.forEach(function(t6) {
                  u2.children.push(e6(t6));
                });
              }), u2;
            };
            return ce(e5) || (e5 = ue(e5)), o3(e5);
          }(e4, this.options), r2 = this._myIndex.records, i2 = {}, o2 = [];
          return r2.forEach(function(e5) {
            var r3 = e5.$, c2 = e5.i;
            if (k(r3)) {
              var a2 = function e6(n3, r4, i3) {
                if (!n3.children) {
                  var o3 = n3.keyId, c3 = n3.searcher, a3 = t3._findMatches({key: t3._keyStore.get(o3), value: t3._myIndex.getValueForItemAtKeyId(r4, o3), searcher: c3});
                  return a3 && a3.length ? [{idx: i3, item: r4, matches: a3}] : [];
                }
                switch (n3.operator) {
                  case ne:
                    for (var s2 = [], u2 = 0, h2 = n3.children.length; u2 < h2; u2 += 1) {
                      var f2 = e6(n3.children[u2], r4, i3);
                      if (!f2.length)
                        return [];
                      s2.push.apply(s2, l(f2));
                    }
                    return s2;
                  case re:
                    for (var d2 = [], v2 = 0, g2 = n3.children.length; v2 < g2; v2 += 1) {
                      var y2 = e6(n3.children[v2], r4, i3);
                      if (y2.length) {
                        d2.push.apply(d2, l(y2));
                        break;
                      }
                    }
                    return d2;
                }
              }(n2, r3, c2);
              a2.length && (i2[c2] || (i2[c2] = {idx: c2, item: r3, matches: []}, o2.push(i2[c2])), a2.forEach(function(e6) {
                var t4, n3 = e6.matches;
                (t4 = i2[c2].matches).push.apply(t4, l(n3));
              }));
            }
          }), o2;
        }}, {key: "_searchObjectList", value: function(e4) {
          var t3 = this, n2 = te(e4, this.options), r2 = this._myIndex, i2 = r2.keys, o2 = r2.records, c2 = [];
          return o2.forEach(function(e5) {
            var r3 = e5.$, o3 = e5.i;
            if (k(r3)) {
              var a2 = [];
              i2.forEach(function(e6, i3) {
                a2.push.apply(a2, l(t3._findMatches({key: e6, value: r3[i3], searcher: n2})));
              }), a2.length && c2.push({idx: o3, item: r3, matches: a2});
            }
          }), c2;
        }}, {key: "_findMatches", value: function(e4) {
          var t3 = e4.key, n2 = e4.value, r2 = e4.searcher;
          if (!k(n2))
            return [];
          var i2 = [];
          if (v(n2))
            n2.forEach(function(e5) {
              var n3 = e5.v, o3 = e5.i, c3 = e5.n;
              if (k(n3)) {
                var a3 = r2.searchIn(n3), s3 = a3.isMatch, u3 = a3.score, h3 = a3.indices;
                s3 && i2.push({score: u3, key: t3, value: n3, idx: o3, norm: c3, indices: h3});
              }
            });
          else {
            var o2 = n2.v, c2 = n2.n, a2 = r2.searchIn(o2), s2 = a2.isMatch, u2 = a2.score, h2 = a2.indices;
            s2 && i2.push({score: u2, key: t3, value: o2, norm: c2, indices: h2});
          }
          return i2;
        }}]), e3;
      }();
      return ve.version = "6.4.6", ve.createIndex = $, ve.parseIndex = function(e3) {
        var t3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, n2 = t3.getFn, r2 = n2 === void 0 ? A.getFn : n2, i2 = e3.keys, o2 = e3.records, c2 = new E({getFn: r2});
        return c2.setKeys(i2), c2.setIndexRecords(o2), c2;
      }, ve.config = A, function() {
        ee.push.apply(ee, arguments);
      }(Z), ve;
    }, typeof exports == "object" && typeof module != "undefined" ? module.exports = t() : typeof define == "function" && define.amd ? define(t) : (e = e || self).Fuse = t();
  });

  // src/class-turbo-admin-palette.js
  var import_fuse_6_4_6 = __toModule(require_fuse_6_4_6());

  // src/types/class-turbo-admin-menu-item.js
  var TurboAdminMenuItem = class {
    title = "";
    action = "";
    parentTitle = "";
    noCache = false;
    constructor(title, action, parentTitle, noCache = false) {
      this.title = title;
      this.action = action;
      this.parentTitle = parentTitle;
      this.noCache = noCache;
    }
    sameAs(item) {
      return item.title === this.title && item.action === this.action && item.parentTitle === this.parentTitle;
    }
  };
  var class_turbo_admin_menu_item_default = TurboAdminMenuItem;

  // src/class-storage.js
  var Storage = class {
    constructor() {
      this.store = null;
      if (typeof browser === "undefined") {
        this.store = window.localStorage;
      } else {
        this.store = browser.storage.local;
      }
    }
    async set(dataObject) {
      if (typeof browser === "undefined") {
        const keys = Object.keys(dataObject);
        keys.forEach((key) => this.store.setItem(key, JSON.stringify(dataObject[key])));
      } else {
        await this.store.set(dataObject);
      }
    }
    async get(key) {
      if (typeof browser === "undefined") {
        let returnObj = {};
        let item = this.store.getItem(key);
        if (!item) {
          return returnObj;
        }
        let itemObject = null;
        try {
          itemObject = JSON.parse(this.store.getItem(key));
        } catch (e) {
          itemObject = null;
        }
        returnObj[key] = itemObject;
        return returnObj;
      } else {
        return await this.store.get(key);
      }
    }
  };
  var class_storage_default = Storage;

  // src/apis/class-content-api.js
  var ContentApi = class {
    constructor() {
      this.active = false;
      this.store = new class_storage_default();
      this.postTypes = [];
      this.cache = {};
    }
    async discoverApiRoot() {
      console.log("Discovering API root");
      let wpApiSettings = null;
      this.storageKey = "wpApiSettings." + globalThis.taWp.home;
      const wpApiSettingsScript = document.getElementById("wp-api-request-js-extra");
      if (wpApiSettingsScript) {
        const wpApiSettingsString = wpApiSettingsScript.innerHTML.match(/var\s+wpApiSettings\s+=\s+(.+);/)[1];
        const wpApiSettings2 = JSON.parse(wpApiSettingsString);
        const objectToSave = {};
        objectToSave[this.storageKey] = wpApiSettings2;
        await this.store.set(objectToSave);
        this.apiRoot = wpApiSettings2.root;
        this.apiBase = this.apiRoot + wpApiSettings2.versionString;
        this.apiNonce = wpApiSettings2.nonce;
        this.maybeExpireNonce(wpApiSettings2);
        this.active = true;
        return;
      }
      wpApiSettings = await this.store.get(this.storageKey);
      if (wpApiSettings && Object.keys(wpApiSettings).length !== 0 && wpApiSettings[this.storageKey] && typeof wpApiSettings[this.storageKey] === "object") {
        wpApiSettings = wpApiSettings[this.storageKey];
        this.apiRoot = wpApiSettings.root;
        this.apiBase = this.apiRoot + wpApiSettings.versionString;
        this.apiNonce = wpApiSettings.nonce;
        this.maybeExpireNonce(wpApiSettings);
        this.active = true;
        return;
      }
      if (globalThis.taWp.apiLinkUrl) {
        this.apiRoot = globalThis.taWp.apiLinkUrl;
        this.apiBase = this.apiRoot + "wp/v2/";
        this.active = true;
        return;
      }
      console.log("API Route Discovery failed");
    }
    async discoverPostTypes() {
      console.log("Discovering post types");
      if (!this.active) {
        console.log("Not active");
        this.postTypes = [];
        return;
      }
      this.postTypes = await this.getPostTypes();
      console.log("Discovered post types: ", this.postTypes);
    }
    userLoggedIn() {
      return document.body.classList.contains("logged-in") || document.body.classList.contains("wp-admin");
    }
    async maybeExpireNonce(wpApiSettings) {
      if (wpApiSettings?.nonce && !this.userLoggedIn()) {
        this.apiNonce = null;
        wpApiSettings.nonce = null;
        const objectToSave = {};
        objectToSave[this.storageKey] = wpApiSettings;
        await this.store.set(objectToSave);
      }
    }
    makeParamString(data) {
      const params = new URLSearchParams();
      Object.keys(data).forEach((paramKey) => {
        if (Array.isArray(data[paramKey])) {
          const arrayParamKey = paramKey + "[]";
          data[paramKey].forEach((item) => params.append(arrayParamKey, item));
        } else {
          params.append(paramKey, data[paramKey]);
        }
      });
      return params.toString();
    }
    statuses() {
      if (this.apiNonce) {
        return ["publish", "future", "draft", "pending", "private"];
      } else {
        return ["publish"];
      }
    }
    async getPostTypes() {
      if (this.cache["postsTypes"] !== void 0) {
        return this.cache["postTypes"];
      }
      const response = await this.get("types");
      const result = await response.json();
      this.cache["postTypes"] = result;
      return result;
    }
    async getPosts(searchString, postType = "any") {
      const cacheKey = `posts-${postType}-${searchString}`;
      if (this.cache[cacheKey] !== void 0) {
        return this.cache[cacheKey];
      }
      const response = await this.get("search", {
        search: searchString,
        per_page: 100,
        type: "post",
        subtype: postType
      });
      const result = await response.json();
      this.cache[cacheKey] = result;
      return result;
    }
    async doesPostExist(postId) {
      if (this.cache["post-" + postId] !== void 0) {
        return this.cache["post-" + postId];
      }
      const init = {
        method: "GET",
        headers: {},
        mode: "cors",
        cache: "no-store",
        credentials: "include"
      };
      const response = await fetch(`${globalThis.taWp.siteUrl}/post.php?post=${postId}&action=edit`, init);
      this.cache["post-" + postId] = response;
      return response?.status === 200;
    }
    async getPlugins(searchString) {
      if (this.cache["plugins-" + searchString] !== void 0) {
        return this.cache["plugins-" + searchString];
      }
      let requestOptions = {};
      if (searchString) {
        requestOptions.search = searchString;
      }
      const response = await this.get("plugins", requestOptions);
      const result = await response.json();
      this.cache["plugins-" + searchString] = result;
      return result;
    }
    async getUsers(searchString) {
      if (this.cache["users-" + searchString] !== void 0) {
        return this.cache["users-" + searchString];
      }
      const response = await this.get("users", {
        search: searchString,
        per_page: 100,
        context: "edit"
      });
      const result = await response.json();
      this.cache["users-" + searchString] = result;
      return result;
    }
    async get(path, data = {}) {
      const init = {
        method: "GET",
        headers: {},
        mode: "cors",
        cache: "no-store",
        credentials: "include"
      };
      if (this.apiNonce) {
        data._wpnonce = this.apiNonce;
      }
      const params = this.makeParamString(data);
      const response = await fetch(`${this.apiBase}${path}/?${params}`, init);
      if (response.status < 200 || response.status >= 300) {
        globalThis.turboAdmin.turboAdminPalette.showPaletteNotice("WordPress API Error. Try visiting the dashboard to refresh things.");
      }
      return response;
    }
  };
  var class_content_api_default = ContentApi;

  // src/types/class-submenu-item.js
  var SubmenuItem = class {
    title;
    url;
    attributes = [];
    constructor(title, url) {
      this.title = title;
      this.url = url;
    }
    addAttribute(name, value) {
      this.attributes.push({
        name,
        value
      });
    }
  };
  var class_submenu_item_default = SubmenuItem;

  // src/types/class-content-item.js
  var ContentItem = class {
    title = "";
    subtype = "";
    url = "";
    submenuItems = [];
  };
  var class_content_item_default = ContentItem;

  // src/types/class-search-mode.js
  var SearchMode = class {
    keyword = "";
    displayName = "";
    searchCallback;
    defaultItemsCallback = null;
    constructor(keyword, displayName, searchCallback, defaultItemsCallback = null) {
      this.keyword = keyword;
      this.displayName = displayName;
      this.searchCallback = searchCallback;
      this.defaultItemsCallback = defaultItemsCallback;
    }
  };
  var class_search_mode_default = SearchMode;

  // src/class-turbo-admin-palette.js
  var TurboAdminPalette = class {
    constructor(paletteData, options) {
      console.log("Initialising TurboAdmin");
      this.options = options;
      this.paletteElement = document.getElementById("ta-command-palette-container");
      this.paletteInnerElement = document.getElementById("ta-command-palette");
      this.paletteInputElement = document.getElementById("ta-command-palette-input");
      this.paletteItemsContainerElement = document.getElementById("ta-command-palette-items-container");
      this.paletteItemsElement = document.getElementById("ta-command-palette-items");
      this.paletteSubmenuContainerElement = document.getElementById("ta-command-palette-submenu-container");
      this.paletteSearchModeTag = document.getElementById("ta-command-palette-search-mode-tag");
      this.paletteSearchModeTabNotice = document.getElementById("ta-command-palette-tab-notice");
      this.paletteSearchModeTabNoticeText = document.getElementById("ta-command-palette-tab-notice-text");
      this.paletteNoticeElement = document.getElementById("ta-command-palette-notice");
      if (globalThis.turboAdmin.menuNeedsRefresh) {
        this.showPaletteNotice("Menu needs refreshing. Visit the Dashboard to refresh.");
      }
      this.profileLinkElem = document.getElementById("wp-admin-bar-edit-profile");
      this.profileLink = null;
      if (this.profileLinkElem) {
        this.profileLink = this.profileLinkElem.querySelector("a").href;
      }
      this.paletteData = paletteData;
      this.paletteDataBackup = null;
      this.paletteItemsBackup = null;
      this.paletteItemIndexBackup = null;
      this.searchMode = null;
      this.paletteItems = [];
      this.itemIndex = {};
      this.buildPaletteItems();
      this.selectedItem = this.paletteItems[0];
      this.openedSubMenu = null;
      this.selectedSubItem = null;
      this.updatePaletteItems();
      this.navigating = false;
      this.debounceTimeout;
      this.paletteFuseOptions = [];
      this.paletteFuse = null;
      if (typeof import_fuse_6_4_6.default !== "function") {
        return;
      }
      this.paletteFuseOptions = {
        keys: ["innerText"]
      };
      this.paletteFuse = new import_fuse_6_4_6.default(this.paletteItems, this.paletteFuseOptions);
      document.addEventListener("keydown", (e) => this.handleGlobalKey(e));
      this.paletteElement.addEventListener("click", (e) => {
        this.checkForPaletteItemClick(e);
        this.checkForClickToClose(e);
      });
      this.paletteItemsElement.addEventListener("mouseover", (e) => {
        this.setHoveredItem(e.target);
      });
    }
    htmlDecode(input) {
      var doc = new DOMParser().parseFromString(input, "text/html");
      return doc.documentElement.textContent;
    }
    isMac() {
      return navigator.platform.startsWith("Mac");
    }
    metaPressed(e) {
      return this.isMac() ? e.metaKey : e.ctrlKey;
    }
    inSearchMode() {
      return this.searchMode !== null;
    }
    buildPaletteItems() {
      this.paletteItems = [];
      this.itemIndex = {};
      this.paletteData.forEach((item) => {
        const li = document.createElement("li");
        const a = document.createElement("a");
        li.appendChild(a);
        a.href = item.action;
        let title = item.title;
        if (item.parentTitle) {
          title = item.parentTitle + ": " + title;
        }
        a.innerHTML = title;
        this.addPaletteListItem(li);
      });
    }
    addPaletteListItem(listItem) {
      this.paletteItems.push(listItem);
      const link = listItem.querySelector("a");
      if (link) {
        this.itemIndex[link.href] = 1;
      }
    }
    contentItemExists(url) {
      return Boolean(this.itemIndex[url]);
    }
    setContentItems(contentItems) {
      this.paletteItems = [];
      this.itemIndex = [];
      this.injectContentItems(contentItems, false);
    }
    injectContentItems(contentItems, andRunSearch = true) {
      console.log("Injecting items");
      if (contentItems.length > 0) {
        contentItems.forEach(this.injectItem.bind(this));
      }
      if (andRunSearch) {
        this.paletteFuse = new import_fuse_6_4_6.default(this.paletteItems, this.paletteFuseOptions);
        this.paletteItems = this.paletteFuse.search(this.paletteInputElement.value).map((i) => i.item);
      }
      this.updatePaletteItems();
    }
    injectItem(item) {
      const itemTitle = item.title;
      const itemType = item.subtype;
      const itemUrl = item.url;
      if (this.contentItemExists(itemUrl)) {
        console.log("Not adding duplicate");
        return;
      }
      let title = itemTitle;
      if (itemType) {
        const itemTypeName = globalThis.contentApi.postTypes[itemType] ? globalThis.contentApi.postTypes[itemType].name : itemType;
        title += ` (${itemTypeName})`;
      }
      const li = document.createElement("li");
      const a = document.createElement("a");
      let subMenu = null;
      if (item.submenuItems.length > 0) {
        subMenu = document.createElement("div");
        const subMenuTitle = document.createElement("div");
        const subMenuItems = document.createElement("ul");
        subMenu.classList.add("ta-submenu");
        subMenuTitle.classList.add("ta-submenu-title");
        subMenuTitle.textContent = this.htmlDecode(itemTitle);
        subMenuItems.classList.add("ta-submenu-items");
        subMenu.appendChild(subMenuTitle);
        for (let i = 0; i < item.submenuItems.length; i++) {
          const subMenuItem = item.submenuItems[i];
          const subMenuListItem = document.createElement("li");
          const subMenuLink = document.createElement("a");
          subMenuLink.innerText = subMenuItem.title;
          subMenuLink.href = subMenuItem.url;
          for (let a2 = 0; a2 < subMenuItem.attributes.length; a2++) {
            subMenuLink.setAttribute(subMenuItem.attributes[a2].name, subMenuItem.attributes[a2].value);
          }
          subMenuListItem.appendChild(subMenuLink);
          subMenuItems.appendChild(subMenuListItem);
        }
        subMenu.appendChild(subMenuItems);
        li.classList.add("ta-has-child-menu");
      }
      a.href = itemUrl;
      a.innerHTML = title;
      li.appendChild(a);
      if (subMenu !== null) {
        li.appendChild(subMenu);
      }
      this.addPaletteListItem(li);
    }
    async handleGlobalKey(e) {
      if (this.shortcutKeysPressed(e)) {
        e.preventDefault();
        e.stopPropagation();
        if (this.paletteShown()) {
          this.hidePalette();
        } else {
          this.showPalette();
        }
        return;
      }
      if (e.code === "Escape" && this.paletteShown()) {
        if (this.isSubMenuOpen()) {
          this.closeSubMenu();
        } else if (this.inSearchMode()) {
          this.leaveSearchMode();
        } else {
          this.hidePalette();
        }
        return;
      }
      if (this.paletteShown()) {
        await this.paletteActions(e);
      }
    }
    shortcutKeysPressed(keyEvent) {
      const keysPressed = this.options.shortcutKeys.reduce((keyPressed, combo) => {
        if (keyPressed) {
          return keyPressed;
        }
        return (!navigator.platform.startsWith("Mac") || combo.meta === keyEvent.metaKey) && combo.alt === keyEvent.altKey && combo.shift === keyEvent.shiftKey && combo.ctrl === keyEvent.ctrlKey && (keyEvent.code === "Key" + combo.key.toUpperCase() || combo.key === " " && keyEvent.code.toUpperCase() === "SPACE");
      }, false);
      return keysPressed;
    }
    maybeHighlightInputKeyword(newKey) {
      if (this.inSearchMode()) {
        return;
      }
      let newInputValue = this.paletteInputElement.value;
      if (newKey.length === 1) {
        newInputValue += newKey;
      }
      if (newKey === "Backspace") {
        newInputValue = newInputValue.slice(0, -1);
      }
      if (this.isKeyword(newInputValue)) {
        this.paletteSearchModeTabNoticeText.innerText = `Search for ${newInputValue}`;
        this.paletteSearchModeTabNotice.classList.add("active");
      } else {
        this.unhighlightInputKeyword();
      }
    }
    unhighlightInputKeyword() {
      this.paletteSearchModeTabNotice.classList.remove("active");
    }
    async debouncedPaletteSearchAndUpdate() {
      if (!this.inSearchMode()) {
        this.debounceTimeout = null;
        await this.paletteSearchAndUpdate();
        return;
      }
      clearTimeout(this.debounceTimeout);
      this.debounceTimeout = setTimeout(async function() {
        this.debounceTimeout = null;
        await this.paletteSearchAndUpdate();
      }.bind(this), 750);
    }
    isKeyword(inputString) {
      return Object.keys(globalThis.turboAdmin.searchModes).includes(inputString);
    }
    showPaletteNotice(text) {
      this.paletteNoticeElement.classList.add("active");
      this.paletteNoticeElement.innerText = text;
    }
    hidePaletteNotice() {
      this.paletteNoticeElement.classList.remove("active");
    }
    async paletteActions(e) {
      if (e.code === "ArrowDown" && this.paletteShown()) {
        e.preventDefault();
        this.moveDown();
        return;
      }
      if (e.code === "ArrowUp" && this.paletteShown()) {
        e.preventDefault();
        this.moveUp();
        return;
      }
      if (e.code === "Enter" && this.paletteShown()) {
        e.preventDefault();
        this.doAction(this.metaPressed(e));
        return;
      }
      if (this.isSubMenuOpen()) {
        return;
      }
      this.maybeHighlightInputKeyword(e.key);
      if (!this.inSearchMode() && (e.code === "Tab" || e.key === ":")) {
        console.log("Checking for search mode");
        let inputValue = this.paletteInputElement.value;
        if (this.isKeyword(inputValue)) {
          console.log("Found search mode " + inputValue);
          e.preventDefault();
          await this.enterSearchMode(globalThis.turboAdmin.searchModes[inputValue]);
          return;
        }
      }
      if (this.inSearchMode() && e.code === "Backspace" && this.paletteInputElement.value === "") {
        e.preventDefault();
        this.leaveSearchMode();
        return;
      }
      await this.debouncedPaletteSearchAndUpdate();
    }
    async enterSearchMode(searchMode) {
      console.log("Entering search mode for keyword " + searchMode.keyword);
      this.backupPaletteData();
      this.paletteData = [];
      this.paletteItems = [];
      this.itemIndex = [];
      this.hidePaletteNotice();
      this.searchMode = searchMode;
      this.paletteInputElement.value = "";
      this.addSearchModeTag(searchMode.displayName);
      this.unhighlightInputKeyword();
      this.updatePaletteItems();
      if (searchMode.defaultItemsCallback !== null) {
        this.paletteInnerElement.classList.add("loading");
        const results = await searchMode.defaultItemsCallback();
        this.setContentItems(results);
        this.paletteInnerElement.classList.remove("loading");
      }
    }
    leaveSearchMode() {
      const searchMode = this.searchMode;
      this.searchMode = null;
      this.removeSearchModeTag();
      this.restorePaletteData();
      this.paletteInputElement.value = searchMode.keyword;
      this.maybeHighlightInputKeyword("");
      this.paletteSearchAndUpdate();
    }
    backupPaletteData() {
      this.paletteDataBackup = this.paletteData;
      this.paletteItemsBackup = this.paletteItems;
      this.paletteItemIndexBackup = this.itemIndex;
    }
    restorePaletteData() {
      this.paletteData = this.paletteDataBackup;
      this.paletteItems = this.paletteItemsBackup;
      this.itemIndex = this.paletteItemIndexBackup;
    }
    addSearchModeTag(title) {
      this.paletteSearchModeTag.classList.add("active");
      this.paletteSearchModeTag.innerText = title;
    }
    removeSearchModeTag() {
      this.paletteSearchModeTag.classList.remove("active");
    }
    isPaletteOpen() {
      return this.paletteElement?.classList.contains("active");
    }
    showPalette() {
      if (this.isPaletteOpen()) {
        return;
      }
      this.paletteInputElement.value = "";
      this.paletteInputElement?.focus();
      this.paletteElement?.classList.add("active");
      setTimeout(() => this.paletteItemsElement.scrollTop = 0, 100);
    }
    hidePalette() {
      this.navigating = false;
      this.paletteElement?.classList.remove("active");
      this.paletteInputElement.value = "";
      this.paletteInputElement.blur();
      if (this.isSubMenuOpen()) {
        this.closeSubMenu();
      }
      if (this.searchMode !== null) {
        this.leaveSearchMode();
      }
    }
    paletteShown() {
      return this.paletteElement?.classList.contains("active");
    }
    checkForPaletteItemClick(e) {
      if (e.target.tagName === "A") {
        e.preventDefault();
        if (this.isSubMenuOpen()) {
          this.selectedSubItem = e.target.closest("li");
        } else {
          this.selectedItem = e.target.closest("li");
        }
        this.setSelectedElement();
        this.doAction(this.metaPressed(e));
      }
    }
    checkForClickToClose(e) {
      if (e.target.id === this.paletteElement.id) {
        this.hidePalette();
      }
    }
    setSelectedElement() {
      if (this.isSubMenuOpen()) {
        this.paletteSubmenuContainerElement?.querySelectorAll(".ta-submenu li.selected")?.forEach((e) => e.classList.remove("selected"));
        this.selectedSubItem.classList.add("selected");
      } else {
        this.paletteItemsElement?.querySelectorAll("li.selected")?.forEach((e) => e.classList.remove("selected"));
        if (this.selectedItem) {
          this.selectedItem.classList.add("selected");
          this.scrollList();
        }
      }
    }
    scrollList() {
      if (this.selectedItem.offsetTop < this.paletteItemsElement.scrollTop) {
        this.paletteItemsElement.scrollTop = this.selectedItem.offsetTop;
      }
      if (this.selectedItem.offsetTop + this.selectedItem.offsetHeight > this.paletteItemsElement.offsetHeight + this.paletteItemsElement.scrollTop) {
        this.paletteItemsElement.scrollTop = this.selectedItem.offsetTop + this.selectedItem.offsetHeight - this.paletteItemsElement.offsetHeight;
      }
    }
    setHoveredItem(element) {
      if (element.tagName === "LI") {
        this.navigating = true;
        if (this.isSubMenuOpen()) {
          this.selectedSubItem = element;
        } else {
          this.selectedItem = element;
        }
        this.setSelectedElement();
      }
    }
    moveDown() {
      if (this.isSubMenuOpen()) {
        const nextItem = this.selectedSubItem.nextElementSibling;
        this.navigating = true;
        if (nextItem) {
          this.selectedSubItem = nextItem;
          this.setSelectedElement();
        }
      } else {
        const nextItem = this.selectedItem.nextElementSibling;
        this.navigating = true;
        if (nextItem) {
          this.selectedItem = nextItem;
          this.setSelectedElement();
        }
      }
    }
    moveUp() {
      if (this.isSubMenuOpen()) {
        const prevItem = this.selectedSubItem.previousElementSibling;
        this.navigating = true;
        if (prevItem) {
          this.selectedSubItem = prevItem;
          this.setSelectedElement();
        }
      } else {
        const prevItem = this.selectedItem.previousElementSibling;
        this.navigating = true;
        if (prevItem) {
          this.selectedItem = prevItem;
          this.setSelectedElement();
        }
      }
    }
    isSubMenuOpen() {
      return this.openedSubMenu !== null;
    }
    openSubMenu(subMenuElement) {
      this.paletteSubmenuContainerElement.replaceChildren(subMenuElement);
      const subMenuHeight = this.paletteSubmenuContainerElement.offsetHeight;
      this.paletteItemsContainerElement.style.minHeight = subMenuHeight + "px";
      this.paletteSubmenuContainerElement.classList.add("active");
      this.selectedSubItem = subMenuElement.querySelector("li");
      this.openedSubMenu = subMenuElement;
      this.setSelectedElement();
      this.paletteInputElement.disabled = true;
      this.paletteInputElement.blur();
    }
    closeSubMenu(subMenuElement = null) {
      if (subMenuElement === null) {
        subMenuElement = document.querySelector(".ta-submenu.active");
      }
      this.paletteSubmenuContainerElement.classList.remove("active");
      this.selectedSubItem.classList.remove("active");
      this.paletteItemsContainerElement.style.minHeight = "auto";
      this.selectedSubItem = null;
      this.openedSubMenu = null;
      this.paletteInputElement.disabled = false;
      this.paletteInputElement.focus();
    }
    doAction(metaPressed = false) {
      if (this.isSubMenuOpen()) {
        this.actOnItem(this.selectedSubItem, metaPressed);
        return;
      }
      if (this.selectedItem.classList.contains("ta-has-child-menu")) {
        const subMenu = this.selectedItem.querySelector(".ta-submenu");
        this.openSubMenu(subMenu);
        return;
      }
      this.actOnItem(this.selectedItem, metaPressed);
    }
    actOnItem(item, metaPressed) {
      this.hidePalette();
      const link = item.querySelector("a");
      const url = link.href;
      if (link.getAttribute("href") === "") {
        return;
      }
      if (link.dataset.action === "clipboard") {
        navigator.clipboard.writeText(url);
        return;
      }
      if (metaPressed) {
        window.open(url, "_blank");
      } else {
        window.location = url;
      }
    }
    selectedItemDisplayed() {
      return Array.from(this.paletteItemsElement.childNodes).includes(this.selectedItem);
    }
    async paletteSearchAndUpdate() {
      await this.paletteSearch();
      this.updatePaletteItems();
    }
    async paletteSearch() {
      if (!this.searchMode) {
        this.buildPaletteItems();
        if (this.paletteInputElement.value !== "") {
          this.paletteFuse = new import_fuse_6_4_6.default(this.paletteItems, this.paletteFuseOptions);
          this.paletteItems = this.paletteFuse.search(this.paletteInputElement.value).map((i) => i.item);
        }
        return;
      }
      if (this.paletteInputElement.value.length === 0) {
        this.paletteInnerElement.classList.add("loading");
        let results = [];
        if (this.searchMode.defaultItemsCallback !== null) {
          results = await this.searchMode.defaultItemsCallback();
        }
        this.setContentItems(results);
        this.paletteInnerElement.classList.remove("loading");
      } else {
        this.paletteInnerElement.classList.add("loading");
        const results = await this.searchMode.searchCallback(this.paletteInputElement.value);
        this.setContentItems(results);
        this.paletteInnerElement.classList.remove("loading");
      }
    }
    updatePaletteItems() {
      const newItems = document.createElement("ul");
      newItems.id = "ta-command-palette-items";
      this.paletteItems.forEach((i) => {
        newItems.appendChild(i);
      });
      this.paletteItemsElement.replaceChildren(...newItems.children);
      if (!this.navigating || !this.selectedItemDisplayed()) {
        this.selectedItem = this.paletteItems[0];
      }
      this.setSelectedElement();
    }
  };
  var class_turbo_admin_palette_default = TurboAdminPalette;

  // src/types/class-item-definition.js
  var ItemDefinition = class {
    detectType = "dom";
    detectSelector = "";
    detectSelectorNone = "";
    itemTitleFunction = null;
    itemUrlFunction = null;
    noCache = false;
  };
  var class_item_definition_default = ItemDefinition;

  // src/types/class-turbo-admin-plugin.js
  var TurboAdminPlugin = class {
    name = "";
    searchModes = [];
    activated = false;
    constructor(pluginName) {
      this.name = pluginName;
      this.registerPlugin();
    }
    registerPlugin() {
      console.log("Inside plugin - requested registration of " + this.name);
      globalThis.turboAdmin.registerPlugin(this);
    }
    shouldActivate() {
      return false;
    }
    activate() {
      this.activated = true;
      this.registerSearchModes();
    }
    registerSearchModes() {
      this.searchModes.forEach(globalThis.turboAdmin.registerSearchMode);
    }
    getAdditionalItemDefinitions() {
      return [];
    }
    saveSetting(key, value) {
    }
  };
  var class_turbo_admin_plugin_default = TurboAdminPlugin;

  // src/class-turbo-admin-wp-notices.js
  var TurboAdminWpNotices = class {
    constructor(rememberedNoticeIds) {
      if (!document.querySelector("body.wp-admin")) {
        return;
      }
      this.noticeSelectors = [
        "#wpbody-content > .notice",
        "#wpbody-content > .wrap > .notice",
        "#wpbody-content > .wrap > .updated",
        "#gf_dashboard_message",
        ".jitm-banner",
        ".fs-notice",
        "#updraft-dashnotice",
        ".woocommerce-message",
        "#akismet_setup_prompt",
        "#wf-onboarding-plugin-header",
        ".llar-notice-review"
      ];
      this.allowedClasses = [
        "notice-success",
        "notice-error",
        "notice-failure",
        "updated"
      ];
      if (rememberedNoticeIds) {
        this.rememberedNoticeIds = rememberedNoticeIds.length > 0 ? rememberedNoticeIds : [];
      } else {
        this.rememberedNoticeIds = [];
      }
      const toolbar = document.getElementById("wpadminbar");
      if (!toolbar) {
        return;
      }
      if (rememberedNoticeIds && rememberedNoticeIds.length > 0) {
        rememberedNoticeIds.forEach((id) => {
          if (typeof id === "string" && id.length > 0) {
            this.noticeSelectors.push("#" + id);
          }
        });
      }
      console.log("Notice Selectors", this.noticeSelectors);
      const notices = document.querySelectorAll(this.noticeSelectors.join(","));
      console.log("Notices", notices);
      notices.forEach((notice) => {
        this.maybeAddIdToNotice(notice);
        if (this.keepNotice(notice)) {
          const rememberButton = document.createElement("button");
          rememberButton.classList.add("ta-remember-notice-button");
          rememberButton.innerText = "Move to panel";
          const forgetButton = document.createElement("button");
          forgetButton.classList.add("ta-forget-notice-button");
          forgetButton.innerText = "Move to dashboard";
          notice.classList.add("ta-added-pos-relative");
          notice.appendChild(rememberButton);
          notice.appendChild(forgetButton);
          rememberButton.addEventListener("click", this.rememberNotice.bind(this), false, true);
          forgetButton.addEventListener("click", this.forgetNotice.bind(this), false, true);
        }
      });
      const noticesToHide = Array.from(notices).filter((notice) => {
        if (this.rememberedNoticeIds.includes(notice.id)) {
          return true;
        }
        if (this.keepNotice(notice)) {
          return false;
        }
        if (notice.offsetHeight === 0 || notice.offsetWidth === 0) {
          return false;
        }
        return true;
      });
      console.log("Notices to hide", noticesToHide);
      const noticesLinkWrapper = document.createElement("div");
      noticesLinkWrapper.id = "ta-notices-link-wrap";
      noticesLinkWrapper.classList.add("hide-if-no-js", "screen-meta-toggle");
      noticesLinkWrapper.style.margin = "0 0 0 6px";
      noticesLinkWrapper.style.float = "left";
      if (noticesToHide.length === 0) {
        noticesLinkWrapper.style.display = "none";
      }
      const noticesButton = document.createElement("button");
      noticesButton.type = "button";
      noticesButton.id = "ta-notices-link";
      noticesButton.classList.add("button", "show-settings");
      noticesButton.innerHTML = 'Notices <span id="ta-notice-count">' + noticesToHide.length + "</span>";
      noticesButton.setAttribute("aria-controls", "ta-notices-wrap");
      noticesButton.addEventListener("click", this.toggleNoticesPanel.bind(this), false);
      noticesLinkWrapper.appendChild(noticesButton);
      const screenMetaLinks = document.getElementById("screen-meta-links");
      screenMetaLinks.appendChild(noticesLinkWrapper);
      const noticesPanel = document.createElement("div");
      noticesPanel.id = "ta-notices-wrap";
      noticesPanel.style.display = "none";
      noticesPanel.dataset.open = "no";
      const noticesPanelInner = document.createElement("div");
      noticesPanelInner.id = "ta-notices-panel-inner";
      noticesToHide.forEach((notice) => {
        noticesPanelInner.append(notice);
      });
      noticesPanel.appendChild(noticesPanelInner);
      const screenMeta = document.getElementById("screen-meta");
      screenMeta.appendChild(noticesPanel);
    }
    keepNotice(noticeElem) {
      return this.allowedClasses.reduce((found, current) => {
        return found || noticeElem.classList.contains(current);
      }, false);
    }
    rememberNotice(ev) {
      const noticesLinkWrap = document.getElementById("ta-notices-link-wrap");
      const panel = document.getElementById("wp-admin-bar-ta-notices");
      const panelInner = document.getElementById("ta-notices-panel-inner");
      const countElem = document.getElementById("ta-notice-count");
      const count = parseInt(countElem.innerText, 10);
      const notice = ev.target.closest(this.noticeSelectors.join(","));
      const noticeId = notice.id;
      console.log(`Remembering ${noticeId}`);
      panelInner.appendChild(notice);
      if (count === 0) {
        noticesLinkWrap.style.display = "block";
      }
      this.updateScreenMetaHeight();
      countElem.innerText = parseInt(countElem.innerText, 10) + 1;
      this.saveRememberedNotice(noticeId);
    }
    saveRememberedNotice(noticeId) {
      this.rememberedNoticeIds.push(noticeId);
      if (typeof browser === "object") {
        browser.runtime.sendMessage({
          action: "rememberNotice",
          noticeId
        });
      } else {
        window.localStorage.setItem("rememberedNoticeIds", JSON.stringify(this.rememberedNoticeIds));
      }
    }
    forgetNotice(ev) {
      const noticesLinkWrap = document.getElementById("ta-notices-link-wrap");
      const panelInner = document.getElementById("ta-notices-panel-inner");
      const countElem = document.getElementById("ta-notice-count");
      const count = parseInt(countElem.innerText, 10);
      const notice = ev.target.closest(this.noticeSelectors.join(","));
      const noticeId = notice.id;
      console.log(`Forgetting ${noticeId}`);
      notice.remove();
      const message = document.createElement("div");
      const p = document.createElement("p");
      message.classList.add("notice", "ta-forget-notice-message");
      p.textContent = "Notice will be back in dashboard on next page load";
      message.appendChild(p);
      panelInner.appendChild(message);
      this.updateScreenMetaHeight();
      countElem.innerText = (count - 1).toString();
      this.saveForgottenNotice(noticeId);
    }
    saveForgottenNotice(noticeId) {
      this.rememberedNoticeIds.push(noticeId);
      if (typeof browser === "object") {
        browser.runtime.sendMessage({
          action: "rememberNotice",
          noticeId
        });
      } else {
        this.rememberedNoticeIds = this.rememberedNoticeIds.filter((id) => id !== noticeId);
        window.localStorage.setItem("rememberedNoticeIds", JSON.stringify(this.rememberedNoticeIds));
      }
    }
    maybeAddIdToNotice(notice) {
      if (notice.id && notice.id !== "" && notice.id !== "message") {
        return;
      }
      const classes = notice.classList;
      notice.id = Array.from(notice.classList).join("-");
    }
    wordpressScreenMetaEventsExist() {
      return typeof window.screenMeta === "object" && window.screenMeta.toggles.filter("#ta-notices-link").length > 0;
    }
    updateScreenMetaHeight() {
      if (this.wordpressScreenMetaEventsExist()) {
        return;
      }
      const screenMeta = document.getElementById("screen-meta");
      const noticesPanel = document.getElementById("ta-notices-wrap");
      const height = noticesPanel.offsetHeight;
      screenMeta.style.maxHeight = height.toString(10) + "px";
    }
    toggleNoticesPanel(ev) {
      if (this.wordpressScreenMetaEventsExist()) {
        return;
      }
      const animationSeconds = 0.3;
      const screenMeta = document.getElementById("screen-meta");
      const noticesPanel = document.getElementById("ta-notices-wrap");
      if (noticesPanel.dataset.open === "no") {
        this.toggleOtherScreenMetaTabs();
        noticesPanel.dataset.open = "yes";
        screenMeta.style.transition = `max-height ${animationSeconds.toString(10)}s`;
        screenMeta.style.maxHeight = "0";
        screenMeta.style.overflow = "hidden";
        screenMeta.style.display = "block";
        noticesPanel.style.display = "block";
        const height = noticesPanel.offsetHeight;
        screenMeta.style.maxHeight = height.toString(10) + "px";
      } else {
        noticesPanel.dataset.open = "no";
        const height = noticesPanel.offsetHeight;
        screenMeta.style.maxHeight = "0";
        setTimeout(() => {
          noticesPanel.style.display = "";
          screenMeta.style.display = "";
          screenMeta.style.transition = "";
          screenMeta.style.overflow = "";
          screenMeta.style.maxHeight = "";
          this.toggleOtherScreenMetaTabs();
        }, animationSeconds * 1e3);
      }
    }
    toggleOtherScreenMetaTabs() {
      const otherTabs = document.querySelectorAll("#screen-meta-links .screen-meta-toggle:not(#ta-notices-link-wrap)");
      otherTabs.forEach((tab) => {
        if (tab.style.visibility === "hidden") {
          tab.style.visibility = "";
        } else {
          tab.style.visibility = "hidden";
        }
      });
    }
  };
  var class_turbo_admin_wp_notices_default = TurboAdminWpNotices;

  // src/class-list-table-shortcuts.js
  var ListTableShortcuts = class {
    constructor() {
      const me = this;
      this.currentRow = null;
      this.currentRowIndex = 0;
      this.listTable = document.querySelector(".wp-list-table");
      if (!this.listTable) {
        return;
      }
      this.tableRows = this.listTable.querySelectorAll("tbody#the-list > tr");
      document.addEventListener("keyup", (e) => this.handleKeyup(e));
    }
    handleKeyup(ev) {
      if (document.activeElement.tagName !== "BODY") {
        return;
      }
      if (ev.key === "j") {
        this.tableMoveDown();
      } else if (ev.key === "k") {
        this.tableMoveUp();
      } else if (ev.key.toLowerCase() === "enter" && this.currentRow !== null) {
        this.openTableRowItem();
      }
    }
    tableMoveDown() {
      this.preTableChange();
      if (this.currentRow === null) {
        this.currentRowIndex = 0;
      } else {
        this.currentRowIndex++;
      }
      this.updateTable();
    }
    tableMoveUp() {
      this.preTableChange();
      if (this.currentRowIndex > 0) {
        this.currentRowIndex--;
        this.updateTable();
      }
    }
    preTableChange() {
      if (this.currentRow !== null) {
        this.tableRows[this.currentRowIndex].classList.remove("ta-active-table-row");
      }
    }
    updateTable() {
      this.currentRow = this.tableRows[this.currentRowIndex];
      if (!this.tableRows[this.currentRowIndex].classList.contains("ta-active-table-row")) {
        this.tableRows[this.currentRowIndex].classList.add("ta-active-table-row");
      }
    }
    openTableRowItem() {
      console.log(this);
      const link = this.currentRow.querySelector("a.row-title");
      if (link) {
        link.click();
      }
    }
  };
  var class_list_table_shortcuts_default = ListTableShortcuts;

  // src/plugins/class-turbo-admin-barkeeper.js
  var TurboAdminBarkeeper = class extends class_turbo_admin_plugin_default {
    constructor() {
      super("Barkeeper");
    }
    shouldActivate() {
      if (globalThis.turboAdmin.options["barkeeper"] !== true) {
        return false;
      }
      if (!document.getElementById("wpadminbar")) {
        return false;
      }
      return true;
    }
    activate() {
      super.activate();
      this.exclusionIds = [
        "wp-admin-bar-menu-toggle",
        "wp-admin-bar-wp-logo",
        "wp-admin-bar-site-name",
        "wp-admin-bar-updates"
      ];
      this.barkeeperState = globalThis.turboAdmin.options["barkeeper-state"];
      this.root = document.getElementById("wp-admin-bar-root-default");
      this.itemsToHide = document.querySelectorAll("#wp-admin-bar-root-default > li");
      Array.from(this.itemsToHide).forEach((element) => {
        if (this.exclusionIds.includes(element.id)) {
          return;
        }
        element.classList.add("ta-barkeeper-collapsable");
      });
      if (this.barkeeperState === "closed") {
        this.root.classList.toggle("ta-barkeeper-closed");
      }
      this.button = document.createElement("button");
      this.button.id = "ta-barkeeper-toggle";
      this.button.innerText = "<";
      this.button.addEventListener("click", (e) => {
        this.root.classList.toggle("ta-barkeeper-closed");
        this.barkeeperState = this.barkeeperState === "open" ? "closed" : "open";
        browser.runtime.sendMessage({
          action: "barkeeperSetState",
          barkeeperState: this.barkeeperState
        });
      });
      this.root.insertAdjacentElement("afterend", this.button);
    }
  };
  var class_turbo_admin_barkeeper_default = TurboAdminBarkeeper;

  // src/plugins/class-turbo-admin-content-search.js
  var TurboAdminContentSearch = class extends class_turbo_admin_plugin_default {
    constructor() {
      super("WP Content");
      const postTypeKeys = Object.keys(globalThis.contentApi.postTypes);
      for (let i = 0; i < postTypeKeys.length; i++) {
        const thisPostTypeKey = postTypeKeys[i];
        const thisPostType = globalThis.contentApi.postTypes[thisPostTypeKey];
        this.searchModes.push(this.makePostTypeSearchMode(thisPostType));
      }
      this.searchModes.push(new class_search_mode_default("id", "Post ID", this.postById.bind(this)));
      this.searchModes.push(new class_search_mode_default("search", "All post types", this.contentSearch.bind(this)));
      this.searchModes.push(new class_search_mode_default("find", "All post types", this.contentSearch.bind(this)));
    }
    shouldActivate() {
      return true;
    }
    activate() {
      super.activate();
    }
    makePostTypeSearchMode(postType) {
      return new class_search_mode_default(postType.slug, postType.name, (searchString) => this.contentSearch(searchString, postType.slug));
    }
    async contentSearch(searchString, postType = "any") {
      const results = await globalThis.contentApi.getPosts(searchString, postType);
      if (!Array.isArray(results)) {
        return [];
      }
      return results.map((result) => {
        const item = new class_content_item_default();
        item.title = result.title;
        item.subtype = result.subtype;
        item.url = result.url;
        item.submenuItems = item.submenuItems.concat(this.makeSubmenuItems(result.id, item));
        return item;
      });
    }
    async postById(postId) {
      if (!postId.trim().match(/^\d+$/)) {
        return [];
      }
      const postExists = await globalThis.contentApi.doesPostExist(postId);
      const resultAsContentItem = new class_content_item_default();
      if (!postExists) {
        resultAsContentItem.title = "Post does not exist or is not visible";
        return [resultAsContentItem];
      }
      resultAsContentItem.title = `Post ID: ${postId}`;
      resultAsContentItem.url = globalThis.taWp.home + `/?p=${postId}`;
      resultAsContentItem.submenuItems = resultAsContentItem.submenuItems.concat(this.makeSubmenuItems(postId, resultAsContentItem));
      return [resultAsContentItem];
    }
    makeSubmenuItems(postId, contentItem) {
      const itemsToReturn = [];
      itemsToReturn.push(new class_submenu_item_default("View", contentItem.url));
      if (globalThis.turboAdmin.turboAdminPalette.profileLink) {
        const editLink = globalThis.taWp.siteUrl + `/post.php?post=${postId}&action=edit`;
        itemsToReturn.push(new class_submenu_item_default("Edit", editLink));
        if (globalThis.turboAdmin.hasActivatedPlugin("OxygenBuilder")) {
          const oxygenLink = globalThis.taWp.home + `?page_id=${postId}&ct_builder=true&ct_inner=true`;
          itemsToReturn.push(new class_submenu_item_default("Edit with Oxygen", oxygenLink));
        }
      }
      const copyLinkItem = new class_submenu_item_default("Copy link", contentItem.url);
      copyLinkItem.addAttribute("data-action", "clipboard");
      itemsToReturn.push(copyLinkItem);
      return itemsToReturn;
    }
  };
  var class_turbo_admin_content_search_default = TurboAdminContentSearch;

  // src/plugins/class-turbo-admin-plugins.js
  var TurboAdminPluginSearch = class extends class_turbo_admin_plugin_default {
    constructor() {
      super("WP Plugins");
      this.searchModes.push(new class_search_mode_default("plugin", "Plugins", this.pluginSearch, this.defaultPluginItems.bind(this)));
    }
    shouldActivate() {
      return true;
    }
    activate() {
      super.activate();
    }
    async defaultPluginItems() {
      return await this.pluginSearch("");
    }
    async pluginSearch(searchString) {
      const results = await globalThis.contentApi.getPlugins(searchString);
      if (!Array.isArray(results)) {
        return [];
      }
      return results.map((result) => {
        const item = new class_content_item_default();
        item.title = result.name;
        item.subtype = "Plugin";
        const itemViewUrlParams = new URLSearchParams();
        itemViewUrlParams.set("plugin_status", "all");
        itemViewUrlParams.set("s", result.name);
        item.submenuItems.push(new class_submenu_item_default("View", globalThis.taWp.siteUrl + "/plugins.php?" + itemViewUrlParams.toString()));
        return item;
      });
    }
  };
  var class_turbo_admin_plugins_default = TurboAdminPluginSearch;

  // src/plugins/class-turbo-admin-users.js
  var TurboAdminUserSearch = class extends class_turbo_admin_plugin_default {
    constructor() {
      super("WP Users");
      this.searchModes.push(new class_search_mode_default("user", "Users", this.userSearch, this.defaultUserItems.bind(this)));
    }
    shouldActivate() {
      return true;
    }
    activate() {
      super.activate();
    }
    async defaultUserItems() {
      return await this.userSearch("");
    }
    async userSearch(searchString) {
      const results = await globalThis.contentApi.getUsers(searchString);
      if (!Array.isArray(results)) {
        return [];
      }
      return results.map((result) => {
        const item = new class_content_item_default();
        if (result.first_name && result.last_name) {
          item.title = `${result.first_name} ${result.last_name} - `;
        }
        item.title += result.email;
        item.subtype = result.roles[0];
        item.url = globalThis.taWp.siteUrl + `/user-edit.php?user_id=${result.id}`;
        return item;
      });
    }
  };
  var class_turbo_admin_users_default = TurboAdminUserSearch;

  // src/plugins/class-turbo-admin-mu-sites.js
  var TurboAdminMUSites = class extends class_turbo_admin_plugin_default {
    constructor() {
      super("WP Multisite Sites");
      this.searchModes.push(new class_search_mode_default("site", "Sites", this.siteSearch.bind(this), this.defaultSiteItems.bind(this)));
    }
    shouldActivate() {
      return Boolean(document.querySelector("#wp-admin-bar-my-sites"));
    }
    activate() {
      super.activate();
    }
    async defaultSiteItems() {
      return await this.siteSearch("");
    }
    async siteSearch(searchString) {
      const sites = document.querySelectorAll("#wp-admin-bar-my-sites #wp-admin-bar-my-sites-list > li");
      if (sites.length === 0) {
        return [];
      }
      const sitesArray = Array.from(sites);
      const sitesLinks = sitesArray.map((site) => site.querySelector("a"));
      const filteredSites = sitesLinks.filter((site) => site.innerText.toLowerCase().includes(searchString.toLowerCase()));
      return filteredSites.map((site) => {
        const item = new class_content_item_default();
        item.title = site.innerText;
        item.subtype = "Site";
        item.url = site.href;
        item.submenuItems = item.submenuItems.concat(this.makeSubmenuItems(site));
        return item;
      });
    }
    makeSubmenuItems(siteElement) {
      const submenuItems = [];
      const submenu = siteElement.nextElementSibling.querySelector(`.ab-submenu`);
      if (!submenu) {
        return [];
      }
      const submenuLinks = submenu.querySelectorAll("a");
      if (submenuLinks.length === 0) {
        return [];
      }
      const submenuLinksArray = Array.from(submenuLinks);
      submenuLinksArray.forEach((link) => {
        const submenuItem = new class_submenu_item_default(link.innerText, link.href);
        submenuItems.push(submenuItem);
      });
      return submenuItems;
    }
  };
  var class_turbo_admin_mu_sites_default = TurboAdminMUSites;

  // src/plugins/class-turbo-admin-oxygen-buillder.js
  var TurboAdminOxygenBuilder = class extends class_turbo_admin_plugin_default {
    constructor() {
      super("OxygenBuilder");
    }
    shouldActivate() {
      let oxygenLinkElem = document.getElementById("toplevel_page_ct_dashboard_page");
      if (!oxygenLinkElem) {
        oxygenLinkElem = document.getElementById("wp-admin-bar-oxygen_admin_bar_menu");
      }
      if (!oxygenLinkElem) {
        oxygenLinkElem = Number(window.localStorage.getItem("ta-has-oxygen-builder"));
      }
      const hasOxygenBuilder = Boolean(oxygenLinkElem);
      window.localStorage.setItem("ta-has-oxygen-builder", hasOxygenBuilder ? "1" : "0");
      return hasOxygenBuilder;
    }
    activate() {
      super.activate();
    }
    getAdditionalItemDefinitions() {
      const editDefinition = new class_item_definition_default();
      editDefinition.detectType = "dom";
      editDefinition.detectSelector = "#ct-edit-template-builder";
      editDefinition.itemTitleFunction = () => "Edit with Oxygen";
      editDefinition.itemUrlFunction = (element) => element.href;
      editDefinition.noCache = true;
      const backToWpDefinition = new class_item_definition_default();
      backToWpDefinition.detectType = "dom";
      backToWpDefinition.detectSelector = ".oxygen-back-to-wp-menu .oxygen-toolbar-button-dropdown a:not(:last-of-type)";
      backToWpDefinition.itemTitleFunction = (element) => "Back to WP: " + element.textContent;
      backToWpDefinition.itemUrlFunction = (element) => {
        if (element.href) {
          return element.href;
        } else {
          let url = new URL(window.location.href);
          return url.origin + url.pathname;
        }
      };
      backToWpDefinition.noCache = true;
      return [
        editDefinition,
        backToWpDefinition
      ];
    }
  };
  var class_turbo_admin_oxygen_buillder_default = TurboAdminOxygenBuilder;

  // src/class-turbo-admin.js
  var TurboAdmin = class {
    constructor(options) {
      this.doInit = true;
      if (document.getElementById("ta-command-palette-container")) {
        console.log("TurboAdmin already initialised - I won't make a second copy!");
        this.doInit = false;
        return globalThis.turboAdmin;
      }
      this.options = options;
      this.plugins = {};
      this.searchModes = {};
      this.menuNeedsRefresh = false;
    }
    async init() {
      if (!this.doInit) {
        return;
      }
      new class_turbo_admin_barkeeper_default();
      new class_turbo_admin_content_search_default();
      new class_turbo_admin_plugins_default();
      new class_turbo_admin_users_default();
      new class_turbo_admin_mu_sites_default();
      new class_turbo_admin_oxygen_buillder_default();
      this.wp = globalThis.taWp;
      this.menu = [];
      if (!this.wp.isBackend) {
        if (!this.wp.siteChanged) {
          if (document.body.classList.contains("logged-in")) {
            const savedMenu = window.localStorage.getItem("ta-palette-data");
            if (savedMenu === null) {
              this.menuNeedsRefresh = true;
            } else {
              this.menu = JSON.parse(savedMenu);
              if (!this.menu.some((item) => item.action.endsWith("upload.php"))) {
                this.menuNeedsRefresh = true;
              }
            }
          }
        }
      } else {
        this.menu = this.getMenu();
      }
      this.addAdditionalMenuItems();
      this.menu = this.menu.concat(this.options.extraItemsRaw ?? []);
      this.menu.sort((a, b) => (a.parentTitle + a.title).localeCompare(b.parentTitle + b.title));
      const itemsToSave = this.menu.filter((item) => !item.noCache);
      window.localStorage.setItem("ta-palette-data", JSON.stringify(itemsToSave));
      this.addPalette();
      this.turboAdminPalette = new class_turbo_admin_palette_default(this.menu, this.options);
    }
    activatePlugins() {
      Object.keys(this.plugins).forEach((plugin) => {
        if (this.plugins[plugin].shouldActivate()) {
          this.plugins[plugin].activate();
        }
      });
      if (this.options["list-table-keyboard-shortcuts"] === true) {
        this.turboAdminListTableShortcuts = new class_list_table_shortcuts_default();
      }
      if (globalThis.contentApi.userLoggedIn()) {
      }
    }
    hasActivatedPlugin(name) {
      return Object.keys(this.plugins).includes(name) && this.plugins[name].activated;
    }
    getMenu() {
      const items = [];
      const menuTop = document.getElementById("adminmenu");
      if (menuTop) {
        const topDOMItems = menuTop.querySelectorAll("li.menu-top");
        topDOMItems.forEach((el) => {
          const a = el.querySelector("a.menu-top");
          const title = a.querySelector(".wp-menu-name").innerHTML;
          const action = a.href;
          const parentTitle = "";
          const item = new class_turbo_admin_menu_item_default(title, action, parentTitle);
          items.push(item);
          const subMenu = el.querySelector(".wp-submenu");
          if (!subMenu) {
            return;
          }
          const subItems = subMenu.querySelectorAll("li a");
          if (!subItems) {
            return;
          }
          subItems.forEach((subEl) => {
            const parentTitle2 = title;
            const childTitle = subEl.innerHTML;
            const childAction = subEl.href;
            const item2 = new class_turbo_admin_menu_item_default(childTitle, childAction, parentTitle2);
            items.push(item2);
          });
        });
      }
      return items;
    }
    addAdditionalMenuItems() {
      let extraItems = this.options.extraItems ?? [];
      const pluginKeys = Object.keys(this.plugins);
      for (let i = 0; i < pluginKeys.length; i++) {
        extraItems = extraItems.concat(this.plugins[pluginKeys[i]].getAdditionalItemDefinitions());
      }
      extraItems = extraItems.concat([
        {
          detectType: "dom",
          detectSelector: "body.wp-admin #wp-admin-bar-view-site a",
          itemTitleFunction: () => "View/visit site",
          itemUrlFunction: (element) => element.href
        },
        {
          detectType: "dom",
          detectSelector: "#wp-admin-bar-dashboard a",
          itemTitleFunction: (element) => element.textContent,
          itemUrlFunction: (element) => element.href
        },
        {
          detectType: "dom",
          detectSelector: "#wpadminbar",
          itemTitleFunction: () => "Logout",
          itemUrlFunction: () => document.getElementById("wp-admin-bar-logout")?.querySelector("a")?.href
        },
        {
          detectType: "dom",
          detectSelector: "#wp-admin-bar-edit a",
          itemTitleFunction: (item) => item.textContent,
          itemUrlFunction: (item) => item.href,
          noCache: true
        },
        {
          detectType: "dom",
          detectSelector: "#wp-admin-bar-view a",
          itemTitleFunction: (item) => item.textContent,
          itemUrlFunction: (item) => item.href,
          noCache: true
        },
        {
          detectType: "dom",
          detectSelector: "#wp-admin-bar-new-content .ab-submenu a",
          itemTitleFunction: (item) => "New " + item.textContent,
          itemUrlFunction: (item) => item.href
        },
        {
          detectType: "dom",
          detectSelector: "#wp-admin-bar-customize a",
          itemTitleFunction: (item) => item.textContent,
          itemUrlFunction: (item) => item.href
        },
        {
          detectType: "dom",
          detectSelectorNone: "#wpadminbar, #loginform",
          itemTitleFunction: () => "Log in",
          itemUrlFunction: () => {
            if (globalThis.taWp.home) {
              return globalThis.taWp.siteUrl;
            }
            return "javascript:alert('Sorry, could not detect login URL.')";
          }
        },
        {
          detectType: "dom",
          detectSelector: "#backtoblog a",
          itemTitleFunction: () => "View/visit site",
          itemUrlFunction: (element) => element.href
        },
        {
          detectType: "dom",
          detectSelector: "#wp-admin-bar-my-sites #wp-admin-bar-network-admin > a",
          itemTitleFunction: () => "Network Admin",
          itemUrlFunction: (element) => element.href
        },
        {
          detectType: "dom",
          detectSelector: "#wp-admin-bar-my-sites #wp-admin-bar-network-admin .ab-submenu a",
          itemTitleFunction: (element) => "Network Admin: " + element.textContent,
          itemUrlFunction: (element) => element.href
        }
      ]);
      extraItems.forEach((item) => {
        let detected = false;
        let elements = null;
        if (item.detectType === "url") {
          detected = Boolean(window.location.href.includes(item.detectPattern));
        } else if (item.detectType === "dom") {
          if (item.detectSelector) {
            elements = document.querySelectorAll(item.detectSelector);
            detected = Boolean(elements);
          } else if (item.detectSelectorNone) {
            elements = document.querySelectorAll(item.detectSelectorNone);
            detected = elements.length === 0;
            elements = document.querySelectorAll("body");
          }
        }
        if (!detected) {
          return;
        }
        elements.forEach((element) => {
          const newItem = new class_turbo_admin_menu_item_default(item.itemTitleFunction(element), item.itemUrlFunction(element), "", item?.noCache);
          if (this.menu.some((menuItem) => {
            return newItem.sameAs(menuItem);
          })) {
            return;
          }
          this.menu.push(newItem);
        });
      });
    }
    addPalette() {
      const container = document.createElement("div");
      container.id = "ta-command-palette-container";
      const palette = document.createElement("div");
      palette.id = "ta-command-palette";
      const paletteNotice = document.createElement("div");
      paletteNotice.id = "ta-command-palette-notice";
      const tabNotice = document.createElement("div");
      tabNotice.id = "ta-command-palette-tab-notice";
      const tabNoticeText = document.createElement("span");
      tabNoticeText.id = "ta-command-palette-tab-notice-text";
      const tabNoticeButton = document.createElement("span");
      tabNoticeButton.id = "ta-command-palette-tab-notice-button";
      tabNoticeButton.innerText = "Tab";
      const input = document.createElement("input");
      input.id = "ta-command-palette-input";
      input.name = "ta-command-palette-input";
      input.type = "text";
      input.setAttribute("autocomplete", "off");
      const searchModeTag = document.createElement("div");
      searchModeTag.id = "ta-command-palette-search-mode-tag";
      const listContainer = document.createElement("div");
      listContainer.id = "ta-command-palette-items-container";
      const list = document.createElement("ul");
      list.id = "ta-command-palette-items";
      const submenuContainer = document.createElement("div");
      submenuContainer.id = "ta-command-palette-submenu-container";
      container.appendChild(palette);
      palette.appendChild(searchModeTag);
      palette.appendChild(paletteNotice);
      tabNotice.appendChild(tabNoticeText);
      tabNotice.appendChild(tabNoticeButton);
      palette.appendChild(tabNotice);
      palette.appendChild(input);
      listContainer.appendChild(list);
      listContainer.appendChild(submenuContainer);
      palette.appendChild(listContainer);
      if (document.getElementById("wpadminbar") && this.options["admin-bar-search"] === true) {
        const paletteLi = document.createElement("li");
        paletteLi.appendChild(container);
        const adminBar = document.getElementById("wp-admin-bar-top-secondary");
        adminBar.appendChild(paletteLi);
        input.addEventListener("focus", (e) => this.turboAdminPalette.showPalette());
        const placeholder = document.createElement("div");
        placeholder.id = "ta-shortcut-key-placeholder";
        placeholder.innerText = this.buildShortcutKeysString();
        placeholder.addEventListener("click", (e) => input.focus());
        palette.insertBefore(placeholder, listContainer);
      } else {
        document.querySelector(this.options.appendToElement ?? "body").appendChild(container);
      }
    }
    registerPlugin(plugin) {
      console.log("Registering plugin " + plugin.name);
      this.plugins[plugin.name] = plugin;
    }
    registerSearchMode(searchMode) {
      console.log("Registering search mode with keyword " + searchMode.keyword);
      globalThis.turboAdmin.searchModes[searchMode.keyword] = searchMode;
    }
    buildShortcutKeysString() {
      let keysString = "";
      let shortcut = this.options.shortcutKeys[0];
      if (shortcut.meta) {
        keysString += "Cmd-";
      }
      if (shortcut.ctrl) {
        keysString += "Ctrl-";
      }
      if (shortcut.alt) {
        keysString += "Alt-";
      }
      if (shortcut.shift) {
        keysString += "Shift-";
      }
      keysString += shortcut.key;
      return keysString;
    }
  };
  var class_turbo_admin_default = TurboAdmin;

  // src/class-wp.js
  var Wp = class {
    constructor() {
      this.siteUrl = "";
      this.home = "";
      this.loginUrl = "";
      this.apiLinkUrl = "";
    }
    async completeInit() {
      this.previousUrl = window.localStorage.getItem("ta-palette-data-site");
      this.siteUrl = window.localStorage.getItem("ta-palette-data-siteurl");
      this.home = window.localStorage.getItem("ta-palette-data-home");
      this.isBackend = this.getIsBackend();
      await this.getUrls();
      this.siteChanged = this.home !== this.previousUrl;
      window.localStorage.setItem("ta-palette-data-site", this.home);
    }
    getIsBackend() {
      return document.body.classList.contains("wp-admin");
    }
    ensureTrailingSlash(url) {
      if (url.endsWith("/")) {
        return url;
      } else {
        return url + "/";
      }
    }
    async testUrl(url, responseUrlMustContain = "") {
      const init = {
        method: "HEAD",
        mode: "cors",
        cache: "no-cache",
        credentials: "same-origin"
      };
      const response = await fetch(url, init);
      if (response.redirected && !response.url.includes(responseUrlMustContain)) {
        return false;
      }
      if (!response.ok) {
        return false;
      }
      return response.url;
    }
    async findWhichUrlWorks(urls, responseUrlMustContain = "") {
      let workingUrl = false;
      let result;
      for (let i = 0; i < urls.length; i++) {
        if (workingUrl)
          continue;
        result = await this.testUrl(urls[i], responseUrlMustContain);
        if (result !== false) {
          workingUrl = result;
        }
      }
      return workingUrl;
    }
    async guessSiteUrlFromHome(homeUrl) {
      const homeWithSlash = this.ensureTrailingSlash(homeUrl);
      return homeWithSlash + "wp-admin/";
    }
    async guessHome() {
      const currentUrl = new URL(window.location);
      const origin = this.ensureTrailingSlash(currentUrl.origin);
      return origin;
    }
    guessHomeFromSiteUrl(siteUrl) {
      return siteUrl.replace(/wp-admin\/?/, "");
    }
    async getUrls() {
      const apiLink = document.querySelector('link[rel="https://api.w.org/"]');
      if (apiLink) {
        this.apiLinkUrl = apiLink.href;
      }
      if (this.isBackend) {
        this.siteUrl = window.location.href.match(/(^.*wp-admin)/)[1];
        this.home = document.getElementById("wp-admin-bar-site-name").querySelector("a").href;
        window.localStorage.setItem("ta-palette-data-siteurl", this.siteUrl);
        window.localStorage.setItem("ta-palette-data-home", this.home);
      } else if (!this.siteUrl || !this.home) {
        if (document.getElementById("wpadminbar")) {
          this.siteUrl = document.getElementById("wp-admin-bar-dashboard").querySelector("a").href;
          if (this.apiLinkUrl) {
            if (this.apiLinkUrl.includes("/wp-json")) {
              this.home = this.apiLinkUrl.replace("wp-json/", "");
            }
            if (this.apiLinkUrl.includes("index.php?rest_route")) {
              this.home = this.apiLinkUrl.replace(/index.php\?rest_route.*/, "");
            }
          } else {
            this.home = this.guessHomeFromSiteUrl(this.siteUrl);
          }
        } else {
          if (this.apiLinkUrl) {
            if (this.apiLinkUrl.includes("/wp-json")) {
              this.home = this.apiLinkUrl.replace("wp-json/", "");
            }
            if (this.apiLinkUrl.includes("index.php?rest_route")) {
              this.home = this.apiLinkUrl.replace(/index.php\?rest_route.*/, "");
            }
            if (this.home) {
              this.siteUrl = await this.guessSiteUrlFromHome(this.home);
            } else {
              this.siteUrl = this.guessSiteUrl();
            }
          } else {
            this.home = await this.guessHome();
            if (this.home) {
              this.siteUrl = await this.guessSiteUrlFromHome(this.home);
            }
          }
        }
      }
      if (this.siteUrl) {
        this.siteUrl = this.siteUrl.replace(/(.+)\/$/, "$1");
      }
      if (this.home) {
        this.home = this.home.replace(/(.+)\/$/, "$1");
      }
    }
  };
  var class_wp_default = Wp;

  // src/apis/class-woocommerce-api.js
  var WoocommerceApi = class {
    constructor() {
      this.cache = {};
    }
    async getOrders(searchString) {
      if (this.cache["orders-" + searchString] !== void 0) {
        return this.cache["orders-" + searchString];
      }
      const response = await this.wooGet("orders", {
        search: searchString,
        per_page: 100
      });
      if (response === false) {
        return false;
      }
      const result = await response.json();
      this.cache["orders-" + searchString] = result;
      return result;
    }
    async getOrder(orderId) {
      if (this.cache["order-" + orderId] !== void 0) {
        return this.cache["order-" + orderId];
      }
      const response = await this.wooGet(`orders/${orderId}`);
      if (response === false) {
        return false;
      }
      const result = await response.json();
      let resultAsArray = [result];
      this.cache["order-" + orderId] = resultAsArray;
      return resultAsArray;
    }
    async getCustomers(searchString) {
      if (this.cache["customers-" + searchString] !== void 0) {
        return this.cache["customers-" + searchString];
      }
      const response = await this.wooGet("customers", {
        search: searchString,
        per_page: 100,
        role: "all"
      });
      if (response === false) {
        return false;
      }
      const result = await response.json();
      this.cache["customers-" + searchString] = result;
      return result;
    }
    async wooGet(path, data = {}) {
      const wooApiBase = globalThis.contentApi.apiRoot + "wc/v3/";
      const init = {
        method: "GET",
        headers: {},
        mode: "cors",
        cache: "no-store",
        credentials: "include"
      };
      if (globalThis.contentApi.apiNonce) {
        data._wpnonce = globalThis.contentApi.apiNonce;
      }
      const params = globalThis.contentApi.makeParamString(data);
      const response = await fetch(`${wooApiBase}${path}/?${params}`, init);
      if (response.status === 404) {
        return false;
      }
      if (response.status < 200 || response.status >= 300) {
        globalThis.turboAdmin.turboAdminPalette.showPaletteNotice("WooCommerce API Error. Try visiting the dashboard to refresh things.");
      }
      return response;
    }
  };
  var class_woocommerce_api_default = WoocommerceApi;

  // src/apis/class-gravity-forms-api.js
  var GravityFormsApi = class {
    constructor() {
      this.cache = {};
    }
    async getForms(searchString) {
      if (this.cache["gf-forms-" + searchString] !== void 0) {
        return this.cache["gf-forms-" + searchString];
      }
      const response = await this.gfGet("forms", {});
      const result = await response.json();
      const searchStringLowerCase = searchString.toLowerCase();
      const formIds = Object.keys(result);
      for (let k = 0; k < formIds.length; k++) {
        const thisId = formIds[k];
        if (!result[thisId].title.toLowerCase().includes(searchStringLowerCase)) {
          delete result[thisId];
        }
      }
      this.cache["gf-forms-" + searchString] = result;
      return result;
    }
    async gfGet(path, data = {}) {
      const gfApiBase = globalThis.contentApi.apiRoot + "gf/v2/";
      const init = {
        method: "GET",
        headers: {},
        mode: "cors",
        cache: "no-store",
        credentials: "include"
      };
      if (globalThis.contentApi.apiNonce) {
        data._wpnonce = globalThis.contentApi.apiNonce;
      }
      const params = globalThis.contentApi.makeParamString(data);
      const response = await fetch(`${gfApiBase}${path}/?${params}`);
      if (response.status < 200 || response.status >= 300) {
        globalThis.turboAdmin.turboAdminPalette.showPaletteNotice("Gravity Forms API Error. Try visiting the dashboard to refresh things.");
      }
      return response;
    }
  };
  var class_gravity_forms_api_default = GravityFormsApi;

  // src/main.js
  var taStorageKey = "turbo-admin-settings";
  async function taInit(settings) {
    if (typeof globalThis.turboAdmin !== "undefined") {
      return;
    }
    globalThis.turboAdmin = null;
    if (typeof settings[taStorageKey] === "undefined") {
      console.log("Weird. Turbo Admin could not find any settings");
      return;
    }
    globalThis.turboAdminOptions = settings[taStorageKey];
    console.log("Preparing Turbo Admin");
    globalThis.taWp = new class_wp_default();
    await globalThis.taWp.completeInit();
    console.log("Turbo Admin: WP is initialised");
    globalThis.contentApi = new class_content_api_default();
    await globalThis.contentApi.discoverApiRoot();
    await globalThis.contentApi.discoverPostTypes();
    globalThis.woocommerceApi = new class_woocommerce_api_default();
    globalThis.gravityFormsApi = new class_gravity_forms_api_default();
    console.log("Turbo Admin: Content API is initialised");
    globalThis.turboAdmin = new class_turbo_admin_default(globalThis.turboAdminOptions);
    await globalThis.turboAdmin.init();
    await globalThis.turboAdmin.activatePlugins();
    if (settings[taStorageKey]["hide-notices"]) {
      globalThis.turboAdminWpNotices = new class_turbo_admin_wp_notices_default(settings[taStorageKey].rememberedNoticeIds);
    }
  }
  document.addEventListener("DOMContentLoaded", async (e) => {
    globalThis.turboAdminOptions = {};
    globalThis.turboAdminOptions[taStorageKey] = {
      shortcutKeys: globalThis.wpTurboAdmin.keys,
      "block-editor-fullscreen-disable": false,
      "block-editor-welcome-screen-kill": false,
      "live-dev-notice": false,
      "list-table-keyboard-shortcuts": globalThis.wpTurboAdmin["listTableShortcuts"] === "1",
      "hide-notices": globalThis.wpTurboAdmin["hideNotices"] === "1",
      rememberedNoticeIds: JSON.parse(window.localStorage.getItem("rememberedNoticeIds")) ?? new Array(),
      barkeeper: globalThis.wpTurboAdmin["barkeeper"] === "1",
      "admin-bar-search": globalThis.wpTurboAdmin["adminBarSearch"] === "1"
    };
    await taInit(globalThis.turboAdminOptions);
  });
})();
//# sourceMappingURL=main.min.js.map
